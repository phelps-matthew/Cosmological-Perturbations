%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Classical_Prelims.pdf
%%Creator: (Adobe Acrobat 11.0.9)
%%For: Christy
%%CreationDate: 8/15/15, 8:50 AM
%%BoundingBox: 0 0 158 45
%%HiResBoundingBox: 0 0 157.0906 44.5090
%%CropBox: 0 0 157.0906 44.5090
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1110 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2015-08-15T08:34:44-04:00"
   xmp:CreatorTool="LaTeX with hyperref package"
   xmp:ModifyDate="2015-08-15T08:34:44-04:00"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.15"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) kpathsea version 6.2.0">
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -44.509 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52587e-05 0 mo
1.52587e-05 44.509 li
157.091 44.509 li
157.091 0 li
cp
clp
false sop
/0 
[/DeviceGray] /CSA add_res
0 gry
%ADOBeginSubsetFont: LWYAAA+CMR17 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LWYAAA+CMR17 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR17.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 67 /C putdup 69 /E putdup 77 /M putdup 80 /P putdup 97 /a putdup 98 /b putdup 99 /c putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 120 /x putdup 121 /y putdef/FontBBox {-33 -250 945 749} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-16 0 430 442 661 669 683 699] def/OtherBlues [-204 -195] def/BlueScale 0.0479599 def/StdHW [26] def/StdVW [53] def/StemSnapH [16 26] def/StemSnapV [53 66] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings20 dict dup begin/C <1C60D8A8C9B64EDF787DF49DCC7993A89661EDE5356558BE1D9324000DD29F5F31FAD7F7866F73BEEB70100E75EBBA0AC6F4617917DCB8B6EC019632FD77DD3DB032F83397BD74D5D190914390608C83F79536F3D83DC1704B1592C8C34E5338A7C625FB8DDE4183B118906F7C2D49778892C446BE786561C4DAF22171D59BD090C2AE2DB7> |-/E <1C60D8A8C9B669952A1D5AC49A12CE2789ABE47446A8E66D512B478855381E3D14293B215E34F7118680AF27B3804B8375A9AA0E1416740B6C49C634BF96FB389D4C810BC0EE2215D493078DBD480FAB028C8F5B65445856FFB6614FA1C73C7065A537663DB668440DF8197E4A002A226D30E26700387E3DA7E6F3EB47C0> |-/M <1C60D8A8C9B687C5E5376201FA681BA7995E63083F3BBAA2B2278A1E6CD966ECBD69BC3338A0AEBAAE038E2AF05CA473AD55367001212505A233F98999AE96C68161E287CD9FB7E7AED7A9B3A1E315559B750DE73D3A4F8D2D129DF61362E245C4D25D47E0AAEF7BCE64129C7E04C8F404252AF9D159E0D98BFB150CBECB8579FA858547B705EAC99F8B7F0C32847C51465166CE8B7EB6249BE90B9C1351F5758531BA4DB59BA6391C32091B8D4598D5004D52D1927AC34FEE8ADFFA095A764FE1AE02E3F33CC96F81FC45724EEDF44940F36AB90916> |-/P <1C60D8A8C9B669952A1D5AC4A6C495E4FFCE2DA33AE3798B8B3940CA85672F2AAC1335E202B312D2496D83B92E94DA74E7116CE9E8ED2E3348E8E504797DB791243EF627A7E244572A54001798528C24992333C3322A52D79397381604363C89034F2A6C2873A300B8DD8692D5FCF5D2BA4D65B3378F350D3DCA6DA31FECAA2377E031FF731EE77CCCB473F6B35F> |-/a <1C60D8A8C9B771A880706B92B3AFBDE43842B9327D228DD93CE826C8543FBBCF14E78A0F96F9F749E030C8AEFA58B8107DA5B93F5DB86D79C4256290A2DE870FF1A8921A6C4FFC13E24C7A515E9B411434066E216E3D4D2992E4089C587017BF032AA672FF09423D82141896AC2943E07AE0D5DBCB55A30DD054AAE43006C496CDBB1FBB2F2DEA9ADA416F9EEDC7B232D0846C2B8EC59A65F6AEA7B4B9D383BE376F1CB74596BD6BE86D663F907D99727CD8> |-/b <1C60D8A8C9B7BDE3EEA1FC484CB410BBA321602F7DB0311B639B17B4C836A665176C80E4D4475318494D2690BFDAD950DB2BD5DA11F5193E77C5A6CA59B98C0D9197B6AC13A16D79C0ED958CADB89EEA1336DAAE8099CC9EF3508AFFF6EC8EC6E146DAFB676AEC1B97A3BFF0B5EFB1A8BA84EA3432C9C943004BD8> |-/c <1C60D8A8C9B70582B8160163538EDBE610B50EF0FC18B9D92BA19D6D2BC8296AA3FB80F6B9CA8EFD1B3A7EE7A4F3864201D24C87587586F1629F73B87A7D1BFBCC20570D7D8B6D6B8017A1A1B2C0C88B84AD8C46DE88B5607801C1A692ACBFC0086CF1EB7A7EEB838D7477768408> |-/e <1C60D8A8C9B70582B816016387D07131FEAAB295C9B2CEBCD5AE7155AEA6DCFC620D54806B44D20CD047EB065CA9C20428B09359FC4A2C7AF055E3D69F7CE42DAED71E11ACDA755923D1067E72A2FA33CB8B49BAF7B90742B9356B3B62330A7BD6E051569280ED2863AA5C27E673DF6B9BCF6E916A> |-/h <1C60D8A8C9B7BDE3E6632AF706EC048FDF92A82B8A451AE8DF9298AFED266375AA9D52328081C7CAE1742A58BBEDBF811C0E52139B809DBBC9146EDDB61201A1F64A57841B1B9B6274C6227B039418A4FA859FBC7D8020D197F86D5992470094A4B2839BEE21110C7EEFE5B5372D540FE15F0165327FFA1D60C8D4D3E05C2D4F4B245319810DB64C70503658AAC0433B99932B1D793AB9F66ADCAF73A61A445F7B43BE6A9793AF5B77E8930DE10AA35A606A2D8DEC055A06AF> |-/i <1C60D8A8C9B873D03D58E86E4D65865714EC9BBF75C4D60EA800932E8CBFDD8685211887749A07F307BD24600512D48D3B8395F221C938F9732C285A5EC8449787F472D80559A3585906EA46D747DB9ADA4C1832C489291141EAF62AE402D2A1953403C193492DA12A9034C2828588269A3C88104D09676C> |-/l <1C60D8A8C9B873D03D58E86F131B1DD1FA95F6E361CA4B6B051E55496F097A2403D177C0CB16F287DC6FE189EB4866736977123D4E5520BBB08207B1F78C67CF3BB49FD23BB155204937061B5CF00B3664DC383DF21058B7F02839> |-/m <1C60D8A8C9B6F9B8457F87FF6B76B4B65AF9F00693AB20B6A169E4FE6AB6302D3A06D710D32E2A44E45F03CE165CAB16860E785D03D742E05C0FD67E5716D6B081235596A401147971DCE5A257C1C05B3CE893A09FFBAAA228A9210EF9DB7D3DF4D3041A622338AD9167BBCA506FBF23335F697C4FF633B83558568A41F87CF6E490FA357BD9A4885B6C7B01CB7230584F7CE399A2C4B86C401BE926EEB055905D0CA54AE63D30EFCD4A162560B3BA76FAB1F82A96249AFB4916C68A34CA4165969659D1FC4D40F9CBF882288F45EA5C7E67F1E34712BE39C33CA56B7A89724492E036775D977D798FBF813E079689A5325AD2A7B86D44A5BA8B17A1F499334FE7924485F7689F65B45E83> |-/n <1C60D8A8C9B7BDE3E6632AF706EC048678A41D4328086F0AA7F33A48F7A5FF34D5B43ED856931E33CA603980808337F95150B7A79F8444217DFF1DCDAA213869171C98EB9B96558B4A67441A84A9A4D04633602A2D8879D744843DC34426A17EA8AF79D46447D37E91BCECEDE9A2BA7E5432CC1C47EE86FBF0561B1EAD9AD303E8AA40A277AAB9C55ACD210075A4CE0B6051E65933B215DF5DCE17627A2EE1809FC477BD4D1B5F4DC70A052A887FAC20F55A4ACA> |-/o <1C60D8A8C9B771A8807641DEB1E85D2706F3E3952019404FE40D001E1FFBE6A3EE543DD2DB19529DDEBF8313DCAF43340BB2CDE2C338C68D92E731143267E1C24F031E495E7A41AE67F327C5663E8722C3988FD37ECC0F17970A66CBA768BC3C248D204D9E43D8ED99B5C875B4C86448E51103A4C76DD1> |-/r <1C60D8A8C9B808988F53F26F0A645AA0E1C2BB347B511826346E80A5916D3FC8135C75566D5F728CCDE1DD2882874CDE228E2B7F551B7476DF392CD6AA360901EB2FA1219B70FADB9584C0CE36BE486CBFB249BD040E8C594E5E333C4980598177F65C6549A40F32C213B900740A8967D6613961CB7A44B60EBC91A0BB94BA87135CEFE64F091057EC1BF0> |-/s <1C60D8A8C9B80527948431BE6AAE26752F22629089AF925234F8E734CA6AB6B0FFE540FEA92F8F9075B1D1ED0E0FFC4091E2AC4809EF361220293C4D647245C635A9E3914C75722A8AD94B877EA0F86315A2B5EB74762F5C05F2099D897302F22A3FF9B535173F68C4DBADB06960EF7EDB31137550670738A6918BEA4B31B4A2BD47011DBC8D9960516135D48CD7F25710176F815B77DEAFAE276CCFB2941594F0B0C4086CEA2479E44D0FA4729BF7B27E19528F894FA0CD8D> |-/t <1C60D8A8C9B80898871F301EA70F96C467FB96CDF4B4F5E5BA7D15C9DFAEA331D4A47D81A3EB4BF1314DDCFFEE58B6B02BDD3654EE9F972149DA74C597ECB882CA992A97D4E63B8C134BB70BD9C5B673585D6E1563DB1966> |-/x <1C60D8A8C9B757A3C758CA724C7F51E1182EE4C158D40C55B553DC39898CF21CFBB3D15CE81C977353464CB3BDB8B0EDCF42A4C27BE5BA1FAE2EFA9511A19CF3BA87E5BC43EE7DF770170873B6751C6A429B7F6B983980353B2AE122AB2BBA6A1933B4EF6A3DBC8E4995012D05B00D802A2FE25F1744508F3104F1DC7088DB7C13EFF602C6B9AD5DCA72EDAA531381CA0B2474A75E6CA6BA710552E13498C98B3C01F414D518CCD5BB57439FBC10C77413E9B46089893CF7F2DEF54EDFC1429C93D4C6F0A7BE9D15E575DFA20EB1AC79D51FDD103CC93FAD20E8AF0107ED150C887B681C5AB259EFBB390EEBAFAFF64D6822C7BB923B5721A77631284E275960118974320A453F5EADEC4719579AC72B5CB31C8B030F1998D8FAC598B2F7E31301E535A1FC73B6057FF0B629CD08218F4E247B7E74DBFFFE97DF6E836386FAC3E2> |-/y <1C60D8A8C9B757A3B74997921774212A33AD3234E90594B81393925C23A0D0E20FF409AF2549856040510106A7C686233CBB3A1F971D1245CF027B27367BE802AFCF326B400CB65AA09FC4B638B7AF728954FBEBF873C6BCAF8FEF7F882609C1F463E374C2E80492B4E74E8A79131293086E2DD0D275D21B854291EE3542C3E3D1D405E12EEA1EB797DF1F760776DD24FCAFC6408810BE8D5E2F728D0342491E098CA33BC25B9EB7996EFEB88132AE79AA80BAB29F217B22E9761FC744DA3AD5449F81BE44B2C5C91D04A4964A72078B280C7A> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDTY+CMR17 /LWYAAA+CMR17 findfont ct_VMDictPut/LLSDTY+CMR17*1 [67{/.notdef}rp /C /.notdef /E 7{/.notdef}rp /M 2{/.notdef}rp /P 16{/.notdef}rp /a /b /c /.notdef /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t 3{/.notdef}rp /x /y 134{/.notdef}rp]LLSDTY+CMR17 nfLLSDTY+CMR17*1 [17.2154 0 0 -17.2154 0 0 ]msf-127.181 -228.941 mo(ClassicalMechanicsPreliminaryExaminationProblems)[11.493 4.29702 7.89503 6.18732 6.1873 4.29703 6.99638 7.89502 9.49608 14.6332 6.9964 6.54877 8.79526 7.89503 8.79526 4.29703 6.99638 11.3864 10.8148 6.09589 6.9964 4.29703 4.29703 13.2919 4.29703 8.79526 7.89502 6.09592 13.5433 10.8148 8.34421 7.89505 13.2919 4.297 8.79529 7.89502 6.09592 4.29703 7.89502 13.9943 10.8148 6.09589 7.89502 8.79526 4.29703 6.9964 13.2919 0 ]xsh%ADOBeginSubsetFont: JIWAAA+CMR12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JIWAAA+CMR12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR12.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 44 /comma putdup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 58 /colon putdup 65 /A putdup 76 /L putdup 77 /M putdup 80 /P putdup 85 /U putdup 97 /a putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 108 /l putdup 112 /p putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdef/FontBBox {-34 -251 988 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [29] def/StdVW [65] def/StemSnapH [20 29] def/StemSnapV [65 81] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings23 dict dup begin/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44214A585DB73B4A5021B7586C9A17E4BEB60731C6D7DA02A5C6E2DB1FBCEE64335DA64C8CBC4291E527F4444DDFE71E69CC854D1966A8E77591AE04236> |-/zero <1C60D8A8C9B752ABCA93999A026DBF99AAD8904D1DDB4E57C113FC7C4BB860A57D51CF4E3751ED57B3101A17AA1B5671A1C015D5C75D8FEB922BD177420EAB3C957481DA4E4963ACF84BF9FC50697C050F334164800BFDE7711618591B1F831B7E866F65D098B3FE084D7C62B127F713D632621D7D805D4B9DC728D9DE8EB464A7CFE042C184593D33015AE1308E4B413209F42702D5> |-/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C55A1866557B8C8E354DD627142F4AFBA8F01617> |-/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B535555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE4758EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B51056C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C1894F0D8820D897F> |-/five <1C60D8A8C9B752ABCAAA254E5D87FCEAB6A0AE2B8052A7BEE91D3A65F575EE4B3B66296C0FE52EA82CE011CF61C01B6A605CD47A5F6A10F9A4E21D79257A513D084EB04BB5AC6A06F1C7B044EA4769F93193E4526D5AA704F93CDFB19EC0E1FEFDBFECCA93D26919EE1DEA3E9D21B9BBE6473D9D0C84AFAE56833A7C6A724DAE6294B8218D36689219603A3A1CC8F24F42576EEE325B8970F582A898EAC65A50F6F13F284ADC24DFB12DA5162556FAFAA1E0644E0CE4F567272CAB0D60E2783CDCC2D13299> |-/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD52F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F52DCAA93297CC1E84D3> |-/A <1C60D8A8C9B613326598F7657C1643B36DF4E6D431FD668445BB11FE398088DEE5A41C4AFFA403F0B7993B417EB7B3B15FEBEFE16C348F00B50710577245EC5725E9F7A6AAD22231B018526DFA67DBA7FB9A721F767D3ACD10D72F32D53B38D4ABB201E09E6F027C714F91F99425AAFDD762AAF18CF265F105D8EFB608F6715CBA54F412965937F206A97D76A83E24CEECA3EF6DFFED913B8A8C5BAFEAC7265BC56D1F6D1BA43E0BCCDCBA7B1982A76772F66F244B6DC5AE7E4FE4D33217F407CABB06> |-/L <1C60D8A8C9B7D8BE6A7720908CD7975F30A0327FB3669E6EA89B3C5E3BAFC4543361DAB5C1C251CE6CB6FBBA59126CBE315D30C095400B410A8307AAD749A1BBBCDB062758BBB170F051FD5309EAA2E140A8056FD28DF145BC5B079B56EBFBD61C05DB0307B9F9A303BCA5CDA6F1A73EFA4CEED8AD50DA93> |-/M <1C60D8A8C9B587231BD32234B47CD93235012A3BC068156B00A427D15147D2FC8687F1C722E8AF7AC72352344B0D2F3D705331D743CEF59C9589B1F1834C3EE8695FCBF0B85371F3D9E8190A24C0B65C17398947726A3B3F278E22E78417C9E1CD5FD816C01FEAF0C445A0496A51D320B44FC54AA0581C256AA34DB4DEB9BE0358796FAF238FAAAE407073A35D34018AAFFB327A94ED4E80FB2A40E4DD506CB1EBF7A05DD0796298B3B3A07104FCFEF148517B1A71A0DDB1D0223A5D087BC6DAA49BDB007CB6C7A8A3A3B9E4FE04DEFB73CE63157CB310DC1A7DB9D1205058> |-/P <1C60D8A8C9B64FADC67A3B29C41FF526FE61435F7AF161F2BEF1560931F99F39BD10D18D7668A3C13BC69BF258FAF1C08BCC6473E419DA4AC9449221BC1F6365A57A3D50A28BA5C6E35259A424E77EA995743B8E5E679CD43DFAF3929282E56D9E229B29F1FBB01986DDB5091773806A00982D9DCC86EA6913EF44DE15B837FE2183A8C81C7F23CB9E0E0BEB14C50B2A5ED353DA14AECF> |-/U <1C60D8A8C9B6133298E76DF3732B437BA6BF5A2C543DEFB653DBC9D7B54C42C76297395BC2304A2D65BE177337C15A5DE05118311ACE15CBDAD046149DDF8E08B7A69693C1907EA46E4F645C656F2F3716A45B85BC2C114AB9CADDCB8F58E4CEB91869760683A4665BC51F38FC2C3569AE84A91A6BD804D591087AD1899D950381C86928BFD5244D0C0204859BCCB01E4CC32AD012C605FB67B0AE3D71A56C27EF332342752F400ED0CD2B2E90CA2A6369A5> |-/a <1C60D8A8C9B752AB3DC5DF79137F171AB577EC746E9985BD1DE96837CEF1DEA48D7D27260C7C7322F99E4296B839C62F65A64E636BC474CE2239895BE8656790A0C5CA6031741B0F7FABFF0A46B85CB2914D6506539949EE96DF768328856311BCC165C9E04D0C64F4698152B28ECBF186E6D19CF18C2535D7AFD403DD42BDCC8DAD14BDCC9C9A4F278509AB5C49AE5DB321EED2831122881D8D62586149EF7F> |-/d <1C60D8A8C9B79C5F973E01663BD36EF6A8BF028D4B0A7A4D9A6B1D8F8010C50CB86E629F9BA29716CB03A29B62B2BC55176F9023051921DDD1ABA12B2D1931F5305D2F2C6A93A518F54BAB51C13B6E7278B0BF99D06C13B9ED52D0A2FE43A7DA2672E57649FA06D9304D05278701CCD983A0F2E5F0F077D1FA728F1AFE6F10AE3152B97E4D2200C0E44E2F1A83> |-/e <1C60D8A8C9B7686E50B91A10F4C805B90007B8ED9F69CD2ABB860BC6B4C24ADD309DD878EF1585F238AE8F9D91356FA3239D5176BBB7DB2E85C191C46227879B3BF7D3968B6A2DF76C157A7C772E03B2D4C63BD69B1201900C6BD10D61A3ACE648AF080836F4E237C1FE890558DD8376> |-/g <1C60D8A8C9B752AB470B4A9661AD18D19A581C4D690EDDD4100E53B28E9F7BBEDEAA1385B79045B700DEA568C3019E5C596E7A66C5BC825F40CE296C60F1B092B5BB14AFFFAFC76A328AC29586AC90AAB636CC004C7ED9FBF40060B03EEDA84B8C35DE7A42F46EEF6201A70FE64C1DF3B9689FDFC6452A26797E5D5B28F0314F337B3ABD23CD4B5C8ABC1D39DA1F56BC8A5D8E6BAEB4DF785AE9CB937C45B0390FC706BE0196DADFEB0D01F7F2BE059EE99CFF11EB45B089108526DA6402A0E965D58457B51B3E9964B87513B82E9A621770523EE5CD42171AEDF8901601746780534133C2F8427ADD19CBC6B5800A44F412C931DF053A5A5E60930FE1276D661D1D1E1BCEB08D8536C6E9> |-/h <1C60D8A8C9B79C5F9DD058B93AC67891D0EF62C068BBE0C9778A4B557364657A2B3EAB237FC048CA9C206978D503894899312F16BD4CBC29CC5BDFD5B339254228D699CD4175C78CD950F4E4603A391782A54AC11469A046EF0D6D3F5309C2CDA02F1B4274291B5D220666709FF904C69EB458DC0177486F120A6C94934A2612EB90583911C0EBFDE4B13B93D4A8398BA491F43100EB77D827E54C705CABDA9C3EC30E637394FABD07404DF1CD0153873157B7AD181B1FB8A151CD17A7C3D021980D71289AB5> |-/l <1C60D8A8C9B85D12B724967D35F648783331BBC1EE8DB5003079F7430DA43E81BBC7468DA6B1B45BE0E5907E1FD60F6A47B1CFDFF488C6309642616C183AB49CEE81F55EF5087AB0E56404FBB1395EDD51A084257E4A1ADB8135145C> |-/p <1C60D8A8C9B79C5FEDAC3A5356612CABCD4B9B1627D68462987B7A70A6F73E962D75C0768D4251A1A9D7D2337D7BBECE040BEC6CE049708ED932D339620D1B8715D1596A1865F43ABB89A0C1B60EB8D33E9DCA285F730839BEC55CE38C57C17862D101F34E39EFFAD28CAC702FF76E283D09625FCCA7E3A1E34ED19135AF7AACEAD2ADC4454A31D80873574D5E5E5331CE826316DB0221E51ECA76C5DD73AD0B85B75ACCFC6C8370EA3C7ECCBFAD28F838> |-/s <1C60D8A8C9B7397095546C4A386811A909F264178C102E37E91BC31B924D9B3178CC879F813C9FBB28DDFAFB5E4DB00AB47969517F6CA9E4D009805CCA02704F29F1D897E47248614C06B38AB9A6CC2CEE2ABD4589B792535C94946347E192BCD5837CE43D7ADDA9D020C9042E829DE580CEC30A08C16AC2D87AF6B276C3A330306CED37BE405496AC7E42FA5ED43499AD61FCD13817A426BD247F0B326AA7AE4D4BC1AB9BB25568BB7CBC493F05A0BA6E2659752A4C90130ADF1F0C148FA36155> |-/t <1C60D8A8C9B73F59A6AC2B53C00F251FAA3807B287449C6CE7B1D574F12775168A2081C70118BD346A2CBA3F46FA00F6475C5B747F4FFE0350AC63B6F034A86CAAC4C0E72D751CC6FA6AAFAF7EEB756D424FBA69667E00> |-/u <1C60D8A8C9B79C5F973E0166279F70672EBC89841EA2F6C6916249FF7730FDFB878E3685E5C001D8E6D0F7D826F009D3FC8EFCE4B248B62100A438B6E5EB2E9B4B75853ADF8C25B6B3965D080DC9A3EDBE25DAC5D4D23A3E962A425C47202B665CCA8F038084193F908BB9BE29956E> |-/w <1C60D8A8C9B6367591C005587708E42BDE65588BBEC4233514C6BD2ECAD7D4BC65627304ED240CFB1B08FB1360A88844D55689A2DCE615E7A221F9961F1C8958C6878E9FF5508472B0AA2859F9DEC7851DA4825686B31704CBF5739C40FC9E1AF798372D02EBA37F60A600A32D4063D05B3137059FF095670902339BCD15EDE40EB72AE3B51B80A47C0F1755BF1D6550A1FCFA76C08EA4AB817416E334C6DFC77AA51C49487259FBBFA82994645FAE998F0F69C7ED0EC5C97DA88BB986CB90F73BCE1B195B5B43A326286BF2507D0F0A3869D87FDA14B38C67B4F54E9B57AD8201C9D464DEAE8D97C42B2742539EF8A9E7B94494F38E247E1DAA8ECB3FE5B07660BF096D3283E9E7483CDDA2F6FB9748A5DF4329D0> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDTZ+CMR12 /JIWAAA+CMR12 findfont ct_VMDictPut/LLSDTZ+CMR12*1 [44{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 4{/.notdef}rp /colon 6{/.notdef}rp /A 10{/.notdef}rp /L /M 2{/.notdef}rp /P 4{/.notdef}rp /U 11{/.notdef}rp /a 2{/.notdef}rp /d /e /.notdef /g /h 3{/.notdef}rp /l 3{/.notdef}rp /p 2{/.notdef}rp /s /t /u /.notdef /w 136{/.notdef}rp]LLSDTZ+CMR12 nfLLSDTZ+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf23.6692 -198.63 mo(MatthewPhelps)[10.7262 5.85318 4.55252 4.55252 6.50369 5.20288 12.3521 7.96454 6.50369 5.20285 3.25186 6.50369 0 ]xsh-15.3808 -174.171 mo(LastUpdated:August15,2015)[7.31421 5.85318 4.6171 8.44992 8.77504 6.83844 6.50372 5.85318 4.54056 5.20288 6.50369 8.46432 8.77502 6.50372 5.85318 6.50369 4.6171 8.44992 5.85318 5.85318 7.14926 5.85318 5.85321 5.85318 0 ]xsh%ADOBeginSubsetFont: DLGQMX+CMBX12 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /DLGQMX+CMBX12 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX12.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 87 /W putdup 101 /e putdup 105 /i putdup 110 /n putdup 114 /r putdup 116 /t putdef/FontBBox {-53 -251 1139 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-12 0 444 453 656 676 686 698] def/OtherBlues [-201 -194] def/BlueScale 0.0437899 def/StdHW [43] def/StdVW [109] def/StemSnapH [34 43] def/StemSnapV [109 132] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings11 dict dup begin/zero <1C60D8A8C9B7E96521F001CC0EB36BC3D7D13B17C89A8D64440B46769F101A1D3635B44BDC196D9ACEDA056CC5D18D1F0A5E91CC12E6E1D0691DA119B8829659C9F6A902AE23F67FE41832172B4F7C6B1403FD52E74F0512A60F2E76CD97DF93E7ABEE82BCDEA082080BFB0E4F4D6F4568580330DE696BB5204A05> |-/one <1C60D8A8C9B7E965D5369621FFAB1B9C3B3DD60A16276F9B8574BE945CD2291C164DB7E0721015CB9ECFB40BF6C1C4BD859997C4939CFEDFAEB6341E6676A997E9F730B160A00F23B0CC3973720A9769CBA75467BCD5491BA77B126B49373A46D7253FA457493B8741A5052A780A> |-/two <1C60D8A8C9B7E965D5770A2BB76634B15E6BBB1C4927B7489BE55463796DA49E4A56D8BA4BE9A6A1C4E9055DF0403A398EB6FF06C7A85D457A35FD1D0EDBD373154EE712D320F338AB34ECE923BD462CA5097BA696BCB48FF10AC4E52C2757F2265FD43CBBE73F3609AFEE0EED722D8AA533EB9DA90D8583E18C0A43E962DF38416BBF665E8D74E3AD> |-/five <1C60D8A8C9B7E96521EF306EA91E052222DBF3C6B97D634CFB1A17889D94F20404AE9286F34C10524DF08E3191C00B6DBAE383C1D5912E7429248F4A1B1C9457558296D065C7E019B4B5FD9695EF12FB713AEE6E1380EA14AD04ED4342DAAA248672FA1CAEDB3276A4E1B0E675D35D2654B7F09B326494E7307ADC53F884A76B7FA246802E8CB03BDAEB412A9BEC9122A6A6900DA77596F3515F241CDC4394EF4E9A9198DD90B5C079D1C9775A3F48EFD6E3DB81D9DB9CD313> |-/W <1C60D8A8C9B08A951887A59ACA612464031D36929654C4988DD7B7FBDBC471E1700DD3DB19A9221F54464CC3C88F23EFA3F86240C833F35D1CEF39EB41865F2659BED9F8EA983B9941EAFE7C57CE1DAD15EF2B43075A29DAFFEDE92554CFD532B42783E2C65E137B658FADB2BEC4F7804FDAB6FE7E4C0F4517F7A974506B0B94A07BEFC2E2179BDA892DA7C30BE74FD97406A865D8BC7CC039C647364BFF1400DAD868610D37CCF774041A4DCD198120E46B10329492A1EC902CA5D8B345BA3D177F4ECE81483DA607D51092925D65A2E277952529556FDAA03DB967447C2D519EB60075D96A5EC5B7F1DFB661233F71B0036C68D927DADFB14959F1> |-/e <1C60D8A8C9B7BA8F6751A5CDF5C037AAB4128F34C3509ABF7ADE828199B2C17A2D8CBE6C57B8C57DF596BB41E015213D76AB4347745EE1D53AC0E2F3A42593C750E77C28ACCF7D98F14A19891FB089D6AA897201C1BB57400EB2994D4C0704569E89434DA95188AB407B2AF60BA259E8DECDF777F1053F8339D4CD87> |-/i <1C60D8A8C9B8327EE9798F01AD33C2B041AC990A254153B7A3DB449BFF29475C81465CBDFEAF145A1233C7AC9F5AE2EF93150E4FCE1C5576AC946E60B1B96A25C3C48586365157E27231E5EDF942155CF86A36ABB0F21DD9A062689241EB8C57162EB75581E188DACA9123A84CA958FCED1C139903> |-/n <1C60D8A8C9B66482C0B06145CAB2A50769325C1784AEB8C412F792549A059C436DA61F5EDB218A3269205FCEDD453F91E2876424303EEA35BCFDAAD1C07A66181A2BED591DF8848DD3B9B30137BC2D9FAF84783FE1EB6DFACDB1107A8CF86E751DD1805C773FA73216611A24781345206BD5433EF11F4D82B295ABFDE19DB22503D93E42CD1DA06DF63F42093E589B98E836487FBBC8AA7BBB78298EA47F8FDD8CC2D8B9771642C342ABCB1A3B910F> |-/r <1C60D8A8C9B770DA3195F484E915F00235E8862AD1F894F00449A6D92168C0ABBFF4F8350031EBDD2A507997BB509C0574D9994D5F882E1635FFDD0AD51199159A292B6EADB2E422AB5DCE801D0F0E887EE201A87EB67821FE8F2801B2014C0F7EB8B1CFDB6D0F8240B7BB92593B21AE3C0D720ABE2164395DC9875014C00D0BDBE76E32> |-/t <1C60D8A8C9B766CA4E2F73F61E322A5C8A2C92DC87809FC0C711FA59F47B15906E0B7947A7508C86C50A469AB8BF0D06F71C9733A48E876FE6BF81328AAC722D1968723C04D710C38D448D0D272C2E2FE58ADE5F1EC98E> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUA+CMBX12 /DLGQMX+CMBX12 findfont ct_VMDictPut/LLSDUA+CMBX12*1 [48{/.notdef}rp /zero /one /two 2{/.notdef}rp /five 33{/.notdef}rp /W 13{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t 139{/.notdef}rp]LLSDUA+CMBX12 nfLLSDUA+CMBX12*1 [11.9552 0 0 -11.9552 0 0 ]msf-148.635 -137.295 mo(2015Winter)[6.72479 6.72481 6.72479 11.208 13.892 3.73601 7.10139 5.23039 6.13667 0 ]xsh%ADOBeginSubsetFont: UPEAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /UPEAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 12 /fi putdup 40 /parenleft putdup 44 /comma putdup 46 /period putdup 49 /one putdup 61 /equal putdup 65 /A putdup 84 /T putdup 97 /a putdup 98 /b putdup 99 /c putdup 100 /d putdup 101 /e putdup 102 /f putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 118 /v putdup 119 /w putdup 121 /y putdef/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings30 dict dup begin/fi <1C60D8A8C9B790A83D946A52CDEF806B68BCA69D0F565BD47A313ACE64EA4C51C4F7E2720AD6426622FF887A9B1CEFB163BC1E0E045B9CF4238406E12352EBBD9242E2C49AFC9D86CDEE482C0035CA1CA44CCBB1436642750A1E71B1CD288AC28B3D26A164143FCB2C92157FC4CD1F366676BE46E871DBBB1239C9614DC38DD102B67124FC3D2C144C05DA896465C2DA06004C93D99A6D33F72F04F023B41A55BAD349B063D76BBE78E5B60101B7FD0DF48C196A450BF7E868A35BEFE7F5AEE46F6B98A5AEE642C67C9F421CFE1639B9D13BF5EC82D77CC20A4B04492D8733D54EC758417FF41850C5076FB5C2875D5227FEF9897E31DFBBC49554A2544AFB8F5D9BAF3452E7> |-/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-/comma <1C60D8A8C9B85744148CA332B8493D4AA74EC0ED15A645BB097A03BCB0F035B963033C1DF7BD2D48E65E6103A6E43630254BF33A6D7E1B7340BEC9334288A8D805FE5AD1AC9173E2E18AD17AD4AEC5661EEF946D3EA40FA8C5> |-/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF025DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668D97ECF27E58978E82B8932F2635747B0D240AA> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-/A <1C60D8A8C9B6E3FA234780E51B74F22595A687FBF09EF454D03FB6CE0741835DFEA276F2BD9DA1E567C1E2AA272C9AF9AA6DE082183B6B069F122C69C93CC84C1E2E5C1EDB186833D9A28F18458A45AD6A7572F00011ECC2E09341FD6937B43E501C94208386B52881CD9F0C7EE85FC76CF7DFA415F22DB3B2B926D06F495CDDAB596E2F022F9C4F3C3961AB08783D379F9901790C33B26D5144056789A95EB7D120F2CBD25F8C89DDE84F37EAAE2D7C9D8E52E449BEC2C204B273340CAA6C0D416A62DDFF217CC15AC6F8> |-/T <1C60D8A8C9B6079F3ACD50B6173265EE696B04F433123BE8FE6957F3B6028924B7831F62749F61057E47C9AFC439E5FE9774BDBA95D8780F15E99A2D6DBC842E367191628A2E402043835AC8FDE6AB93164DF41C7446FAB279D3EB9C66121877CB11D6A7077E1EA3F211DD4775AFAF95572B45BD0445F00DE2D6FF03CC09F95A7375F8A1A506648567695D81EAA6869AE211E13B3028937B3B39284DCE> |-/a <1C60D8A8C9B7A73DCB03313BCF7AD8C8EE234E5372D46A65E92A78F4B7E02ECC58F71EE6C027AD4D56C5E4DE1AF1031295DC17C0E7AC8D8358634F9A19B02A110E5539C10136C68E0D2CBEA6658A501D9D73323861F8C29EB92F9080ACC3E236C5F14389534682EC2925F59CD4A215569A7BD7B9F7827A30BA75EB840535B2A2C8F92AD166CE93D277314A4C690C47DB847F73BFE1049631CDDB9124FD762753AA8DB187C216ED3005CA929015114EA53826E55872B63FD1FA60DB9883C727F137C754792AB823A705DD0DF28293037E1DA5DE4936C6573A1718CA6713783EC51D8DA977> |-/b <1C60D8A8C9B790A83D9E7A6001AC854EF8B943E743E91B99DA29586301CDD5839823233D99B1C577C1F4DFF0EA0F32BC2086F2707A7DD20AF9B67CEAF2A8142C0184903C062BCDA3F619B0D53D20F97863BA7527C41ABC984D83E79275377BA320AFBB48F48B2D10088BC89EBB9C01D05CB682732B7056131A0BF4F223A45FB196C15FF8C20088CC8B4C909F5F0D72D1839A24540D889C90DD68E933DDAD60B1B6BFBEF9B96EA41D08123BC10ECBE3BFA295FF397E499C14DA43850D729620> |-/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDBF65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D86751973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515EB70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D55EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBABF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C18399A9D9> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4DA2371542253C2A1E1B028917A1E5> |-/f <1C60D8A8C9B83BB81FA130945C39F84E5B6E4A6C9F65F126BAA27979D5DD24D841AF174619487B50FE2700B1E5283B920CF0C36EBD127A2FB193DC3CC442CA2E2038702792712AC88F8A95F0FA297EC3B143EBC57B59693CDD3FD2B58E1A0E615D44B1BC286B802CB88D50954B5E67313CC26D2733BD799245E69ACF97F2A9BABCDB06A9D69EA77A4D41E95E2A8D3382998D0B0648C54FDA3BC85D30> |-/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A163CFC67672A34CC74B0AEAADF24229DF1CCAA1488AE3E348FE2ACD572EA487EC9D77FBB0710AB421B03DD5B8AE5519B5C269E9648E819E7ECE806EEF16A6618D07D9AAB350E57F26F5259E8FCF9E5C2D96BBEAD16502F9E7819E854042DDB2BC674C39681CC2E5224219582BC7B59BBAEF869C9DF91CA7770A97BAD53C3C3A99175BA8F0A5744B5969D3BC15831A95918F7C707E41F5D87B8DB2D57378BC9C297DAE69E4BF438246E63F565B22D86CBE28DEF748262FB9FF82A88935451D6280A28F1AD964E6E476D5779321E42D3A86BE41122F1BED36C3DC47E1E01C22534598D0431873197ABE1C8EC03B4011E4B26D249635BDBABB8E5B69BE07AFA65F88EAF6> |-/h <1C60D8A8C9B790A83D946A52D133532E9DDB252C41638FA043533341FF45F4E0EEA3BF171DE971DA044D93815FABEAC6A961DE24CD8980B97FCA250A2CD3DBC1C9175E22BC18E41FEAAE3FDFFC1EC461872FCD8D617F792306109E6C32D9EEF5544F9D280B7D28E77406A0CD8B488898A862DE88999A354709E3D39075170B03FDE60F1E3F7008331FFBCAD1B838829FBE76742914B50EBA96CF0A9BFB3610334BBAB609B960E9922A4587A5710F25CDF35D8C915B99DCE5DB414BDFAE707D88DDA35DD290F04B> |-/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B5617CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4FB895EE90259DCAEBCEFB9765574F> |-/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADFB78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CFF61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D32A> |-/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A0865738F60F13894266612CF652F44C217A476812BE532AC6358E0DAFFB0D5E5117642F5BA2923BEDB1C7E5DCDCA6F9C7FD13A241FE9CAACF60BAB1EA0492936F6C6CF04C43B9AFAC5B2026A794CD9C7836D055F7A78383659A460B574C21AA89D092E6B58E9A31CB4E83AFE695EB2A4193C039EA5F618CAF7745B1FDA9ADBC0C4AFF43C821C2538E4D3E0311619B8D0096703429D61227134D3D4F10264801F2AA4B0A71E89914A580FDC8088D541BDE06B262C3D90AF19EF55DBE228CA71D5828F50534BACCEF423C267E1995B8408ADC61022455B144160D98EB158310C4459DDC5A63157F982CF307D29294A260DA3997052E3598EEBA826650D8D48FE852C19EC9306D47760211C4650B51CCF133ADCA8B28F2087D2999D418C5739327F2B40FD7891074FBE2A054E78BE9D42> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624AAEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC676C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA84C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83C3181BD7505792D4855E> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDFC5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-/p <1C60D8A8C9B790A84D73DFE4D381CFD68735E4475645A4E53BCF7DB579C1AFDD13D1A6F15CA06B47ED1C3E1B244798306364BC5CABD6DA63519493A5C659BC60B5447F0104F114BE694DF580105735E360631FEECD6EC7A012CC851718281D07B0CC157A8E7B5931B7103AE94662442B62C7C336402079CFF632ADA590C0779C308A1FCAF94180306BE01E5D89C2BD042F11A347AFB582199E7E84F8C797ABEE0EDBB75C6E1AC5F4E76437DB6ED4E096E1BDAADA422AEEAC70BB94A61E61EC7C901D077227549E6F61C4273BAEF20A141FBE8FA9A551273E39D70B> |-/r <1C60D8A8C9B734780FC88FD3B21DF573DE0BD8E19ECF409327C58E3627DF4B64D82C290E296AD12D16F3BDD53C90C5D592551EDF5E8C7E8FE6B97498610F068FB40EF014C6896F922B40CC34CEEEFE16781389974FD1D8010C3A1B93DA9423D6C4280D86498AD092998E974DDACA1FA3CA4F3751905AC346A3F69D4682194D3342733C7CF3000C654F8E9DE159A2316F10B36E49A0996D15FEF4DE5D84332102ECD35D818CF4C1F221D14DB48C0FB5BD30A2> |-/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6ECB30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E897F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C847773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC8918AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-/t <1C60D8A8C9B737EC5C828C415A21EF65A8DCE4AB75C4F804FD2F74AAED0332CF1075799E326C4CB510197DA3A668B8EFF3F2CAC89EFC9F1E24EFCBB6E4F7D58562BB90C45FF297D6656314FD65E690525FFF895AC8C24B58CDA801> |-/u <1C60D8A8C9B790A8362C570CFB2800E8CBF5A206A67F17BAAE343254C03E958F83CB5A12ADFA8B4412150589560DDE9B70784A29B02FB60C9645231D13A978308E5EE53984B78C9AC2AA2F0EE5269299E66EC0A2F6D2FC9C7C56146B4A2D450F3E529F72E7D7FD96107695E2148A6B3CC77B93CD510A44599C53106E6043B1ADA6520148DE> |-/v <1C60D8A8C9B78C669403575833C8C1B14674B390D764957989B7FCA39046F88EAC215F3348F64657FA41BBBD2D5465C3FAEC5C4992D77A70D6D0FF5B9FE84D58B8A01F974B26A648270BCBC3DA08E1FB6DCB4BD59931217BAC36EE05C15D6C9332DAEE553F44B623DA84A3E35E45703CEA683F59CB5D7DC58019327FAA4690D7E0848C4054F367D2C3BF6371C99CA6751F50C10017AA2754321B985E8B60B10B9F082539BC1A53136644081D5FD9AE168FC766A25A8946C2> |-/w <1C60D8A8C9B6079F1534F6C9E4A028DF1A3B0F45C5ED9660DAC93A0D8C3F14212FFFC33A5BF9F9DD1C33FCCFCA8E96FE6463AF5069DBFBDDA36D99F88520652F25FDAFA9A8FF2873E3FDAD8A56EC3357F44ECB370CA4BFB8352215DEAFC22A0DFA018C56F834AADBF74CAA36536863C75BD9D7A1CEF77767FBD18809BFE6294ECFE5D3634C7FCBBBF987220663EF315339F3D9AF5AA5B0F66F6EA972A5EE22BB54794478F89EC6375B180C36468ADC7E7CAF0A17CB4A0ECCE19DAEAC46ADA738E6EE5AB37B1A9CDCACA6A56A4B556E8FC78C8021B1E08F770EC97987838BDF3A71E528C5695396142E79124F182E83C76D32BCA38AD1CB77748E00880A049F1E82A6C5E7A5A7404A74F28E09F8202A196F8E9F69EAA58A4A3555B55F> |-/y <1C60D8A8C9B78C66EF659E90818F97757EE825CF655AFC48477B2EBD1F4499DC02D3D00D2C79F15A6A14FA0E2836DE647DF694EA1CBE5D7DC52383058018A4A5582F22DA6D7CA5C65B837F7ACE7A37D8295111416CC9542C83315A00DCC58E29D7A527B2702A3D42A1DF4479D981119205E9B3AA4589ADB8E455F287AEE97EF0B05E9F424581B6FBD77BBF4A2F94CB7C67A1D393F0F92A930746CD86812D0F3B42F48F3482F4A9EA27C315DF77B6F7CF19EE636DE6A48B0C90655339955118E2A4E2CE041041FB27A226D9B9C797FB178764482B1E4FE17D6316683F26947316> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUB+CMR10 /UPEAAA+CMR10 findfont ct_VMDictPut/LLSDUB+CMR10*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft 3{/.notdef}rp /comma /.notdef /period 2{/.notdef}rp /one 11{/.notdef}rp /equal 3{/.notdef}rp /A 18{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]LLSDUB+CMR10 nfLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-135.302 -103.151 mo(1.Asysteminuniformgravity,consistingoftwomasses)[5.45456 8.48512 11.4546 4.30249 5.75783 4.30249 4.24255 4.84798 12.3633 3.03058 9.33386 6.06113 6.06113 3.01965 3.33385 5.45454 4.27303 12.3633 5.45454 4.27303 5.14908 5.75784 3.03058 3.948 4.84149 6.37964 4.84799 5.45453 6.06113 4.30249 3.03058 4.30246 4.24255 3.03058 6.06113 8.72726 5.45456 6.59567 3.948 7.57309 8.72726 9.09055 5.45453 4.30249 4.30249 4.84796 0 ]xsh%ADOBeginSubsetFont: CMKQMX+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /CMKQMX+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 18 /theta putdup 30 /phi putdup 86 /V putdup 108 /l putdup 109 /m putdup 113 /q putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings7 dict dup begin/theta <1C60D8A8C9B746F4DC1E814AE1FC30B39928A17E3C3CA63C78CAE90939580A87811D4F36992BA7EE8729C7E86E3E048DEBCB2FA4242AFA83E02659246909FFFE82876ACA5BD9AAB211D4C866C3763FACC5DB3E2AF016825C3916AE2DAD90E628D66A138E6FBAEC394BDEA529A399D8DB19FD1B19D6102A0762E17B5F> |-/phi <1C60D8A8C9B7C8C15E577C6DC02B015251C7D4F1DC7D8D712F389FA34D0ECFF4415A130BA56088E7D5A6964CB37ACA0876335013BF7A4DEEC1FE238658DD8765DD3E8D8A3A175B5866770DF924EF45424E7970DD4D07F13F8E8C5EE6E9F72A1407D6EFC2F632605786455A35C6C13363F8A4218810E1881324F048117E7F8A3D5CB42287250EF38354090C5D12FA839BB7B6372E78938987EFDCEE31041A631EECC60F0B7353E93DD11FC00FE9F3BA8E73CF> |-/V <1C60D8A8C9B7F44A4E58A3FE29A801396C4DA1DF17CDB2B354514EF59794C1C07AC5FD6F40EE28650B2FE8FB68B9DA6BD85A482B92D52BA74241616AB0AC8E2815E3098242BF657BCF71DB2E9E87D171CE76BB8548E6B2121240DDA27C2525AEFECBD1C7DAA77355B1A83D994CDF326D8868CE17D3A0CE201581FECDB8437425CA9F468A336E5E62074B2DDBF80B29DEFA7D4EED2051F19152B8775C48F83E63250113F1DBD5E8454CCAEF5F05469AC04B813D2E1365A8E1> |-/l <1C60D8A8C9B840B0A5D589BDA4C311648D785E3242291920D778475AEECC9F1A47C3B85F0B92FDDC60D6AE2807C1C14CB8BD6DF09FFA084595421BE1DB1550A932603EB271999DB47E6E040FD73D8DD2D1B0BEEFB752DF28288706B38D5832AE2B421B49506BC0AAFB562D2B4AFD32F3D41DD54529A7D3> |-/m <1C60D8A8C9B5907D10A606D745C9CB74E6BB88A0F3A9F0F60CD6AC0753DE1078F4F9FDB6B815479F3F8E4C08C2277611060995694159FCC2D78EC50D6606F47BAC8A1398DC80C5E684AC883370A5C0C368E90D6EC6CE9F28F4FF49EB4CD9003CC7F16FD0A458554531F31DF07949099D9F289F893C6C0EA6573FB2150C2F087255EF81A7EEB3F17E2AAA817353178C1356798885D696ECA769BAF77B77673C710522BBDF0D2C2EE2D19E2E6FF3F81BFD0244B25EB4D4D7D82E1EC8E49E10740271118963D0C05218ACE6C68295346EB12E8E166BADE2CEAD64A82CCCD6127BF1A62C2509EE150842123EC00626CE2680D411C5A10661C74C5C04837F5760E283E665B33789D5E578DC0371410F32760EB96A60355BA38A71507B81967F128B5C> |-/q <1C60D8A8C9B77D5F98407E9D92DC257C47C50C272692072739C84B6172FB5AE630E7EFC5AD85FF4340F4A05B566E093E188E4B9089AE4EAF2E99D5F342127ECC1A05319EC086FAD78BACDCA132D8DEC587DB2F6E9359EE08C71DCDD552AC2C4DEE114C3875AD48687A10D16BAE74A1170E6C979B948F1B6FA7E0DFD113914C04A1FD0974A2CEF02B2E117BE7DAC3525AC64C4E7A5AF8FCA4716956B383EC144A3C773F8749AF84F2460323DED25CF9CAFED7C3C4DB9C2B4F309FE0BA9796E4479F0CE010D92C1C94D6> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUC+CMMI10 /CMKQMX+CMMI10 findfont ct_VMDictPut/LLSDUC+CMMI10*1 [18{/.notdef}rp /theta 11{/.notdef}rp /phi 55{/.notdef}rp /V 21{/.notdef}rp /l /m 3{/.notdef}rp /q 142{/.notdef}rp]LLSDUC+CMMI10 nfLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf135.605 -103.151 mo(m)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf145.183 -103.151 mo(,eachcarryingacharge)[6.37967 4.84796 5.45456 4.54251 9.33386 4.84796 5.45456 4.27301 4.27301 5.75784 3.03058 6.06113 8.71637 8.72729 4.55341 6.06113 5.45456 4.26212 5.45453 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf260.794 -103.151 mo(q)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf266.055 -103.151 mo(,is)[6.37967 3.03058 0 ]xsh-121.362 -89.6016 mo(arrangedasinthe\014gure,thatis,thearmsoflength)[5.45455 4.27302 4.27303 5.45454 6.06113 5.45454 4.84798 9.94476 5.45456 8.19702 3.03056 9.95567 4.24255 6.06114 8.73161 6.06113 5.45454 6.06114 4.27301 4.84796 6.99057 4.24255 6.06114 5.45454 8.12619 3.03055 4.30249 6.9906 4.24255 6.0611 8.73163 5.45456 4.27301 9.09055 8.19702 5.45456 7.2175 3.03058 4.84796 6.06113 5.45456 4.24255 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf134.285 -89.6016 mo(l)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf141.645 -89.6016 mo(withthemassescanmovein)[7.87854 3.03055 4.24258 9.95566 4.24255 6.06113 8.73163 9.09052 5.45456 4.30246 4.30249 4.84796 8.19705 4.84796 5.45456 9.95569 9.09052 5.14909 5.45236 8.74252 3.03058 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-121.362 -74.8876 mo(\022)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-112.489 -74.8876 mo(and)[5.45454 6.06113 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-91.4638 -74.8876 mo(\036)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-81.5148 -74.8876 mo(directionsindependently.\(Theinteractionbetweenthechargesis)[6.06113 3.03056 4.27303 4.84796 4.84798 4.24255 3.03056 5.45456 6.06113 7.74976 3.03056 6.06113 6.06113 4.84798 6.36658 4.84798 6.06113 6.06113 4.84796 5.75568 4.24258 3.03055 4.85239 7.80875 4.24255 7.87854 6.06113 8.30615 3.03058 5.75568 4.24255 4.84796 4.27301 5.45453 4.84799 4.24255 3.03055 5.45459 9.50836 6.36661 4.84796 3.9371 7.57309 4.84796 4.84799 9.50839 4.24255 6.06113 8.30615 4.54254 6.0611 5.45453 4.27307 5.45453 4.84796 7.74976 3.03058 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf232.841 -74.8876 mo(V)sh%ADOBeginSubsetFont: KVXQMX+CMR8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KVXQMX+CMR8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 50 /two putdef/FontBBox {-36 -250 1070 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [33] def/StdVW [76] def/StemSnapH [28 33] def/StemSnapV [76 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE529851B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E652D787177BE307207126057745DD2D6A7D78294> |-/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A56337D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1DCB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7F5FA2E61175441FDD6> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUD+CMR8 /KVXQMX+CMR8 findfont ct_VMDictPut/LLSDUD+CMR8*1 [49{/.notdef}rp /one /two 205{/.notdef}rp]LLSDUD+CMR8 nfLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf239.205 -73.2516 mo(12)[4.23447 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf251.201 -74.8876 mo(=)sh%ADOBeginSubsetFont: SBVPMX+CMMI8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /SBVPMX+CMMI8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 113 /q putdef/FontBBox {-24 -250 1110 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.0437899 def/StdHW [32] def/StdVW [78] def/StemSnapH [28 32] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/q <1C60D8A8C9B741FC30E79A4170E42D09EDC956E8A1D9C21697E932D6EE0E318D0FDF1FD165BE05D404A8DDA6D4D4B7F3766C8A81D06A0FF408C31A831D763325D4F07016583AC4374F69F254FA59FE9203AE3CE577C40F57866CB4B76C4F0BF17FDC9E833B1092C322A17AE8201361506D52EF629BBA98E06DDD6D716669F643ABE3BC9C0D1D29971DD1C003E08AA3F96E00ED83FE7F8A12E20E8988AB65EE4129B21F9118CAFC0A1E7AFB7919FC04E3DC7D7B5EA51B891D827C89B8E7> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUE+CMMI8 /SBVPMX+CMMI8 findfont ct_VMDictPut/LLSDUE+CMMI8*1 [113{/.notdef}rp /q 142{/.notdef}rp]LLSDUE+CMMI8 nfLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf265.616 -79.8196 mo(q)sh%ADOBeginSubsetFont: KUDAAA+CMR6 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KUDAAA+CMR6 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR6.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /two putdef/FontBBox {-20 -250 1193 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.0437899 def/StdHW [39] def/StdVW [83] def/StemSnapH [32 39] def/StemSnapV [83 100] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/two <1C60D8A8C9B7D8BE6A3AF0AE9C7D4FBA9B02864DF6BF344A2B6AA1A0A59286E6B7771F2FC88421A5248A8C846419F71339C984DF7E348B670629B7028B0F9DE040824CA29E10463F273189D206A5982689C7CF46D51581C07378971555299A4D6CA2BF5F8B3A1779477867A0C854185A470AB8E95D5834103D8330B7F8603A5960C705F2A1C74C> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUF+CMR6 /KUDAAA+CMR6 findfont ct_VMDictPut/LLSDUF+CMR6*1 [50{/.notdef}rp /two 205{/.notdef}rp]LLSDUF+CMR6 nfLLSDUF+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf269.682 -82.6317 mo(2)sh.436 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
263.912 -77.6146 mo
275.537 -77.6146 li
@
%ADOBeginSubsetFont: SBVPMX+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUE+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B845C87883D105C3F24E2FD53DB6D616962DA6D0E3514527BFAEEC13279793C670D1FA00ABD74C427410B2CEBEF7C2F82530323260C8104E5ABF6DA4FE4E68342C6C> |-/i <1C60D8A8C9B8038027D77D999CBA057B605982D4EFF2E178BEDFBC5D829C8E5112CABA4ED50681C441E375A2AC7E68E8698A6DCCC2E74136BB036B7FC46F3436742A4E0AA06B383FFAA5DF5AB17BD8DE754B8EBCF65D9F6F7DFABE9455A90E28843FE18FF57F1E86776E8D65721343F576A2C89429DBF08B777F3CE9936FA2FD679340170DF7B4AA6BFA6CCDFAFFC83D728F58EB8D8CAE83CE92DDDC115CE142CC4BD33D1A52931356799B> |-/r <1C60D8A8C9B75CBB2AADD1FB054120522F9945A278F1641D057749298E592E90B6E80BF48A8F64C2042F081B070E797C7E4F49F9F2C4C6BF7F5BE2F20BEBDE192B562681D3E4238448F943B844317F8F4D0FB1C3FDDC65FFD4CF5656DAB81C96B664469944C3ABCB0C6702461F40F287BD7570E947A9990DBD1AEB36489F5B681A4F5C68A6B7DCE055AB79BD26D2FCB129D2334BF0ABA9E8A6991B9F917DDDDA994A66DFBCE5D95779248B15AB1EFEC4> |-/t <1C60D8A8C9B73CE4EC07CE2C360B4D5A535E14AC6F441EBC287B2878A54E0CA1CBAE5C28E498399C14918504D21556A6334E3C02C71FBC741EA7BC792D6D0561B8235F56FD5C4145D24BFDA151D02FED94DF8760BC3E30D42307F2AEDE7BB01D145917ECEB477B1BB91E93003F7471C00F4B55C6EE97CE5C11716E81B993F149B0C7DA18549E1A8072> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUE+CMMI8 /Encoding getdup 59 /comma putdup 105 /i putdup 114 /r putdup 116 /t putpop%ADOEndSubsetFont
/LLSDUE+CMMI8*1 [59{/.notdef}rp /comma 45{/.notdef}rp /i 7{/.notdef}rp /q /r /.notdef /t 139{/.notdef}rp]LLSDUE+CMMI8 nfLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf263.912 -71.1255 mo(r)sh%ADOBeginSubsetFont: KUDAAA+CMR6 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUF+CMR6 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7D8BE6A6D108299748564B8AA7FDE972DFCEF4C94952114EFA32AA147A324B4F97380434F467992105F86859DCCB242ACAEFFBF289D251089988A8E9A15C68535D9ED43ED7C37BA2DB5423BD0773F871430F8CC8CC4764EC9DAE6E7AC3236A301A264A25A5937BE1B9CE2> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUF+CMR6 /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/LLSDUF+CMR6*1 [49{/.notdef}rp /one /two 205{/.notdef}rp]LLSDUF+CMR6 nfLLSDUF+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf267.733 -70.0186 mo(12)[3.65289 0 ]xsh%ADOBeginSubsetFont: UPEAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUB+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF39716A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB99C4AAA689F9E967FCE15709E3204C4D> |-/hyphen <1C60D8A8C9B81F2C3AF48BE1F128682CB71E9BBC932714B7AB24E23905FE> |-/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065FCDD01CF53F54AF89DAF22339F0A467CEB54960C4097888AD7CBC676C4076733D124E7B4C79B6D0E020E27E56B7A34848B450E2A23F2DF3103BCB5E75D289FAF3FD67A12C99B2EB0A8390A7DAB0DD8B7BFBE34B66044D4D46D3CB580B3DAECD8E50CD2549B4550A6A6B131A61C4> |-/F <1C60D8A8C9B6415B3711EB1374ABAAA5807C9EEF546BB48E20B7C80F2440A33EBF154406CF8E0357C9FC59A91B81A30E2A6B39737D11C4098B5A80670049AA0D28AEFFF6CC9623E77045E059C85ED1DEF097E8AD8EB596D92ECDFA2450852F5239A26C6AE22D6FF2A11E41BB2F0B25F77CCF63F0DFBDCAFB46AB38C0475BF38716AF7C70011524830AEDECD5FE884C30BE71797C9E6C523F53FAFC27E6> |-/L <1C60D8A8C9B66482C0AC2637AE818322843640782B4084B6BCB7EAC5B87BB576EB951099027BB2082BCC7485557848EF03B40B2EB92530435BB00C45D61522480C8796A82EF484C18DA82780A6A608D2AF86DBDD9D897934B97F7994CA6E17FD38486E39BD34B7586F9E2776CCA87540F517999D98A29B36F10CD04369FAA3B4> |-/S <1C60D8A8C9B790A8C3E1550ACC8DA9C9FBD3A5CF2194CD2B8642D81A716BD00E790683F96881FACDE1F9315D62E9690B60701D527468B87CDFB0F4764C5597556AE6A1AC77EAC949F9287197658BC350D110E467DE690E505B49A0B78B79E2357C1B06B49C46DBCFC093C8FD052BE36FB8FD34081A4086AA2F339D541A84930A281511E0A17B9869F6AA55371F1C0D54B13DC306CE1AA830A9CC533AF6BD85406DAA830F9B2385417AD4B282844721D0D07F3AC31F2E4FAB062DE1D98E9BB1ADDC8425AA1837400BB1FE64042CEA44886B96F0827BA19AA957D2008F38EA9B013399E5BDAC4F2A> |-/dotaccent <1C60D8A8C9B85744178364AE7A2C2121C233556D1189CE8DAF70F0FD6185A902E73A611A727072D1BA36> |-/q <1C60D8A8C9B78C66EF5247F5707C9C7401D463F3DD83C2E21DFAE96BA5869F86EF6F51AF0B5F762AE3BB0D8E1C7478B2802678D1830DC7ED9855E0146DF253C5040BF957DE781BFD2649856A22B81BAB60DE0851507882D2678BCCF4FB73FA11E61E10F9FDE35F239CEBF1BA14BA289F2351A51B0529E375EDA96C3901BF06DF76F1DF130B9C42F8C080B5241230FBA0F56D04C3DEED8F2B384970176DCFF7B73356B0D69453B4B4B22EA1DCE13756B7E36E6D00D130EC17FD408B948E6F6DADB60E1BC224E21D91FA057FD171AA> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUB+CMR10 /Encoding getdup 41 /parenright putdup 45 /hyphen putdup 48 /zero putdup 52 /four putdup 70 /F putdup 76 /L putdup 83 /S putdup 95 /dotaccent putdup 113 /q putpop%ADOEndSubsetFont
/LLSDUB+CMR10*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 8{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 10{/.notdef}rp /dotaccent /.notdef /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]LLSDUB+CMR10 nfLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf276.733 -74.8875 mo(,)sh-121.362 -61.3385 mo(where)[7.87853 6.06113 4.84796 4.27303 0 ]xsh%ADOBeginSubsetFont: CMKQMX+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUC+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/delta <1C60D8A8C9B77FE246D59246FEF8414301972DEFFC20DAD8E76B62D4170D7FB3E1ADB81ABE6B4E6996FC3B2B3621970EC9820F84BBDFF6B37F13BF3A9F7D2D922503E82C85B46B60F5320C4078CB5F0FE7F6EB66217DBFD790DB423571F9E4D0E284A358496188A3114CFDEB84E83FD74E25AFF554CEA42767C9B871C82B0A63B9DF1F9BC578AE7E16811698AC39787D15FC677E8D0015> |-/pi <1C60D8A8C9B7E1F893ADA1755C943977AA9E1F1FA7B3CF9936CF3D0D82FDF3DB39919446EE9D415FF6559F65EC0DDE5936C899AF1E37B1592D89FF55A0384DDB895D0B5767288FD45556645E4E3CBEBCA5918E7C6245453BD9AFD79EFA0E0189CCB6A1BC74B55C8346DF0EF53A7012B37F7543F4E624DF9B11858C9D7C91B616016961390492DAE47B229D2BE67FABF7ABF3060C69C3A0E1A8AC00387A3251EBA269B0> |-/comma <1C60D8A8C9B85744148CA332C8F6F1C9DE6B352F8C512D68BA1E31426FC0ECC7A922246EACB7A924151A79EDFB3E3451BD87933C27475FAC0D74CB8267D592363D57178D8C03E491CE91E57E08820A621E0AED28> |-/S <1C60D8A8C9B7D61B49D3C2C55B286BB7611547356F88D2748EE94686CFF7DB559D31FC9FF071D4427CD1BE2C0E0154218F9B78D7DF9660DF25B6417BB6F9F75BE0C95B4CBE8A0ADD0EF176DA908C8A6AAD739CC99FA33EF7F99A2A03213BC117D582256B8F7B61A53F49F1649834B93E189E2FF00920DC197ABC503F04651DBD65AF220AEBDF91D683045EABE5E48703024D70629FF86262AEF629A8290DAB0FA7171C89CB4B4541502BABA5B917742283F08909BAE0150CBE3362CCB8C1E37DBFD80043B2D3C627189CF060AF2A1FEBD818E46E95> |-/d <1C60D8A8C9B7B3D093A5DA22F344125466E8D0134FBA69AA1653B6AEF1AF8F8CB80A17DE6F373F54D15BEC86DD2B0C4F1928DCEC9AD2CBC531A3FA9442BADD64BD5DE854EF788EA4122FAD019E556E23DA6C2BFB96BABCB99348CF6360E1C8E9AD6EA5D3F79D11F01C19320594007512E5C397385890448082CA3D6A2DBBBC2957A5FA0CE1D738A715E9A8F1491B51F14D5FC6CEFFE47A302D922E710D5D854B98204EC69C80D2EECA3B54178DD3ED23184E7DD06BB68A9BC87154E9B2C816290FF5A0> |-/g <1C60D8A8C9B75F2F6D395BACC84C31C3B8372903CC9CFF677AF414414B7A87C94C2007602795A97FFC216D9EC68A6CC816BABFC68EE2D165F092E1DEDD2180D5E68F1E46BD3D39915DBF0BD529944A9F460E79C2A2DD3ADDE535C40B258B0EDF1F0BB945C030943CE9CE8EC3218E2F97303675C45D0C4673767D0716ABF760AE70BC855A6EC26691BFC4D832CC1B7C48F0D399DAC1CD612279746CF4AD2E4603C65720EFD86A50DF927E0E363599AA3336A351667EC814635E> |-/r <1C60D8A8C9B7784785BA933B683516E90CE9BA44EE0AD4F9389DB0FE469800FC3E28873D9258115E0458EFC365CCEF56682184C482125DC01A539285E10445F4534E20E8D0EB40B3D4233CE15FD988201C2047B01E957E08B822EE3732A9F139E7F02289BCF38C117B85ADC425D90A51C1BB0D78A3069181F2B1A441B41684209DF543606AE295EB1AD8E9C1C8DDC847E6CE42266AC25FB6F47EE50E72B02B7F66908EBA> |-/t <1C60D8A8C9B80380260085120D6D1E249FB2DE32EFDFC5AEFCC3C1AB362AB1AC4D945C4142F374B77DC20250C08162AEB69DC4CEC0575EF34A20FF2838C56D01A3D40EE49012FD52F036B2ED1BB119E65DE07D10EB5C2DD7F41ED672F45AF363F4750BF26AF3518256DE17E77936DC9CD6CE44CA5F494C6FB830F5037D06DCD316E617> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUC+CMMI10 /Encoding getdup 14 /delta putdup 25 /pi putdup 59 /comma putdup 83 /S putdup 100 /d putdup 103 /g putdup 114 /r putdup 116 /t putpop%ADOEndSubsetFont
/LLSDUC+CMMI10*1 [14{/.notdef}rp /delta 3{/.notdef}rp /theta 6{/.notdef}rp /pi 4{/.notdef}rp /phi 28{/.notdef}rp /comma 23{/.notdef}rp /S 2{/.notdef}rp /V 13{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l /m 3{/.notdef}rp /q /r /.notdef /t 139{/.notdef}rp]LLSDUC+CMMI10 nfLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-89.1968 -61.3385 mo(r)sh%ADOBeginSubsetFont: KVXQMX+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUD+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A3518927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUD+CMR8 /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/LLSDUD+CMR8*1 [48{/.notdef}rp /zero /one /two 205{/.notdef}rp]LLSDUD+CMR8 nfLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-84.2748 -59.7025 mo(12)[4.23448 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-71.0528 -61.3385 mo(isthedistancebetweenthemasses.\)FindtheLagrangianandtheequi-)[3.03056 8.55704 4.24255 6.06113 9.10252 6.06113 3.03056 4.30247 4.24257 5.45454 6.06113 4.84798 9.11342 6.35567 4.84798 3.94801 7.57309 4.84796 4.84799 10.3157 4.24255 6.06113 9.10251 9.09052 5.45459 4.30246 4.30249 4.84796 4.30249 3.03055 10.9517 7.12149 3.03055 6.06116 10.3157 4.24255 6.0611 9.10254 6.81818 5.45453 5.45459 4.27301 5.45453 6.06116 5.45453 3.03058 5.45453 10.3157 5.45453 6.06116 10.3157 4.24255 6.06116 9.11339 4.84796 5.75787 6.0611 3.03058 0 ]xsh-121.362 -47.7895 mo(librium\(theassumptionthat)[3.03056 3.03056 6.06113 4.27301 3.03056 6.06113 13.0287 4.24255 4.24257 6.06113 8.78615 5.45456 4.30249 4.30247 6.06113 9.09053 6.06113 4.24255 3.03056 5.45454 9.99933 4.24255 6.06113 5.45456 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf22.4232 -47.7895 mo(\036)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf28.9232 -46.1525 mo(1)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf33.1582 -46.1525 mo(;)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf35.5102 -46.1525 mo(0)sh%ADOBeginSubsetFont: JXRAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JXRAAA+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def/Weight (Medium) def/ItalicAngle -14.0401 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 17 /equivalence putdup 32 /minus putdup 76 /L putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 705] def/OtherBlues [-135 -124] def/BlueScale 0.0437899 def/StdHW [40] def/StdVW [40] def/StemSnapH [40 56] def/StemSnapV [40 56] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/equivalence <1C60D8A8C9B6FC2DC07EAE25349BAC944A42AB240C490166E0391AC9907DE2EA7F95AD3D0D3B2D2BBDE7C3914C8F9AC86BF54663906F9C0C4D080DFB58D93EC1142F430C58F64BC946293E4A2E7DC8DA3B3D9BFC5F144AD45499986858D765D4CD31247D3984D8D1DF35327AAFB9> |-/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9CA66334C70459EFC1D8016D52F4ACC8D584A> |-/L <1C60D8A8C9B624F9D04E743986599B8918629590C66900622F30F6B259C5523999E23FBB132F2F367F4D31513F0DA48CAB9BF0E1F1441E0911EF06923088A86C1422812B20811B9B39B073E9DE7878B91926EB53C00DF0AB08050CAA83C344DE8A2080B6B397AB915DD97E8B666DC6E0965A947ECE33B8F8EC187F9D15AB62105EB4C9DDFBF6F67425F4B3D110806503209289EFF13013C1FD6843DFDD2D74FFF6B6FD8474DCF33DA6E021812ADD3682A29CC7DE55F3F4FDB9804D0FAB74787A17E1C4729D53E9DED3BBE969FD30D6C20D334D78E93297FD8DC4A67953> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUG+CMSY10 /JXRAAA+CMSY10 findfont ct_VMDictPut/LLSDUG+CMSY10*1 [17{/.notdef}rp /equivalence 14{/.notdef}rp /minus 43{/.notdef}rp /L 179{/.notdef}rp]LLSDUG+CMSY10 nfLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf42.8682 -47.7895 mo( )shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf53.9792 -47.7895 mo(\036)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf60.4792 -46.1525 mo(2)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf64.7132 -46.1525 mo(;)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf67.0652 -46.1525 mo(0)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf75.3322 -47.7895 mo(=)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf87.3512 -47.7895 mo(\031)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf97.9002 -47.7895 mo(and)[5.45456 6.06113 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf119.415 -47.7895 mo(\022)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf124.536 -46.1525 mo(1)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf128.77 -46.1525 mo(;)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf131.122 -46.1525 mo(0)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf139.389 -47.7895 mo(=)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf151.408 -47.7895 mo(\022)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf156.529 -46.1525 mo(2)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf160.764 -46.1525 mo(;)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf163.116 -46.1525 mo(0)shLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf171.382 -47.7895 mo(\021)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf183.402 -47.7895 mo(\022)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf192.765 -47.7895 mo(canbemadefrom)[4.84796 5.45456 9.9993 6.36661 8.78616 9.09052 5.45456 6.06113 8.78612 3.33386 4.27301 5.45456 0 ]xsh-121.362 -34.2405 mo(symmetrywithoutproof\).Showthattheequilibriumconditionis)[4.30248 5.75784 9.09053 9.09053 4.84798 4.24255 4.27301 9.39058 7.87852 3.03058 4.24255 6.06113 5.45456 6.06113 7.88618 6.06113 4.27303 5.74908 5.45456 4.18477 4.24255 7.87421 6.06113 6.06111 5.16003 11.5112 4.24258 6.06113 5.45453 7.87531 4.24255 6.06113 8.49161 4.84796 5.75784 6.06113 3.03058 3.01965 3.03058 6.0611 4.27304 3.03055 6.06116 12.7341 4.84799 5.45453 6.06116 6.06113 3.03055 4.24255 3.03058 5.45453 9.69388 3.03055 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf17.4832 23.9995 mo(\016S)[5.26251 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf33.0932 23.9995 mo(=)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf44.6082 23.9995 mo(\016)sh%ADOBeginSubsetFont: JQBAAA+CMEX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JQBAAA+CMEX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.000999999 0 0 0.000999999 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 90 /integraldisplay putdef/FontBBox {-24 -2960 1454 772} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0] def/OtherBlues [-1159 -1139] def/BlueScale 0.0479599 def/StdHW [47] def/StdVW [47] def/StemSnapH [40 47] def/StemSnapV [40 47] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/integraldisplay <1C60D8A8C9B790A849148EA2EFC9362E655F2F729E21E0A96F71F3D2F04B836DA2CAB1BC2E58AAC1B3720846A3A712506815034EF8014E5CC4E36AFB4EF97A795583E2CDE40F7505B18CA2823D600DD6A04177BD13E77324C80508B6994BE0D1DDD9C625179C01C399B6C9AF8D4FB77A6303E4EADC5506F23FD6438EF745921134B35265D4B35DE5210353A58F1EF75E6E90201E6EF7A9701A1D5388E400C599167967EA94A83E86F315503BCBF05FD39D76AA> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/LLSDUH+CMEX10 /JQBAAA+CMEX10 findfont ct_VMDictPut/LLSDUH+CMEX10*1 [90{/.notdef}rp /integraldisplay 165{/.notdef}rp]LLSDUH+CMEX10 nfLLSDUH+CMEX10*1 [10.9091 0 0 -10.9091 0 0 ]msf51.6882 9.15149 mo(Z)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf62.5972 12.3065 mo(t)shLLSDUF+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf65.6552 13.4125 mo(2)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf57.7482 33.8915 mo(t)shLLSDUF+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf60.8062 34.9985 mo(1)shLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf72.1222 23.9995 mo(L)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf79.6462 23.9995 mo(\()shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf83.8892 23.9995 mo(q)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf88.7592 25.6365 mo(i)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf92.1402 23.9995 mo(;)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf99.5992 23.9995 mo(_)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf96.9882 23.9995 mo(q)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf101.858 25.6365 mo(i)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf105.24 23.9995 mo(\))shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf111.3 23.9995 mo(dt)[5.6781 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf123.948 23.9995 mo(=0)[11.5179 0 ]xsh17.9632 92.0685 mo(4)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf23.4172 92.0685 mo(mgl)[9.57825 5.59644 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf42.0602 88.1095 mo(2)sh17.9622 96.7214 mo
46.7922 96.7214 li
@
%ADOBeginSubsetFont: CMKQMX+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUC+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eta <1C60D8A8C9B7AB676E988F622EF3490245C9DC4DAD9BACCDD8D0ED9742DFC9154600F07EFC85B66F57A965DBD7A23A37CEC4CAEFC2C54862E118FC91CFA051354B8A4BE567B7A11678D1EF7DA91657885DFB249FE76BC706E0ECF80DE8090CEABF66754ECA20C4E7B1106B4EE5FDE2B200CC7D848DED430F3F6597AC07FBB2EBEE3E1F2FA04AD0884C4DCB7C167CE9DDA7C8051EABE801EE8297DD2F9C999509ADB07E5C1C4360C797A45E3FF7CCA811E817E4759D7180863D32C0227A79C2CA0A18AC> |-/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/partialdiff <1C60D8A8C9B7890DF40F531ACEA25128E06E468A6FA147937064991BAA10197F73E4B5E65EB60F4699121EC5E9AD83E444CE90088189C78363973712DCEA7E7DF5C4A271E8ADC9800A1F8CDD3A421A362FC42D0D7C49848BE48AAAB29CF7C2AF3195D4A5464B86414137143402F976811A420E48192077E45173108E93A911E5A4CD180C8230FCBFF638B7A67052F323848CD2CC451FA060FE2B88F8438905573E81F859A32BD1> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUC+CMMI10 /Encoding getdup 17 /eta putdup 58 /period putdup 64 /partialdiff putpop%ADOEndSubsetFont
/LLSDUC+CMMI10*1 [14{/.notdef}rp /delta 2{/.notdef}rp /eta /theta 6{/.notdef}rp /pi 4{/.notdef}rp /phi 27{/.notdef}rp /period /comma 4{/.notdef}rp /partialdiff 18{/.notdef}rp /S 2{/.notdef}rp /V 13{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l /m 3{/.notdef}rp /q /r /.notdef /t 139{/.notdef}rp]LLSDUC+CMMI10 nfLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf27.3802 106.931 mo(q)sh%ADOBeginSubsetFont: KVXQMX+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUD+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7883CBAA92B92A60ED97CC7706D34A36348BC2B93805C7C1833580FAA27E95855649C4EE0492E1681D62AEDB7EC0D4D44FE91FF7AD4665FD8D6994E56FB00B47353D8538086D2C46021ADFB3F80264F6C2EF23799D21E81ACDE63FE62C97F7BE27D7DCE3B9BAF5B096FE9F9E10574C4FE3C149B03DD0A59DE10D784DCCBFDFC6D3C5399775DC28DB91A04691B5B8F3D1C009DFAB49BB818D90EA7C1> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUD+CMR8 /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/LLSDUD+CMR8*1 [48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]LLSDUD+CMR8 nfLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf32.6422 103.78 mo(2)sh%ADOBeginSubsetFont: UPEAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUB+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-/Y <1C60D8A8C9B6E3FA234780EB1A04772A8B53B108631340B41C9BFC2C615A40AD42F002942BAC7B0D12B6B9F1EB957611B84EED77162F8D26105B776D464E51FDF08EA8D009344ED9A523CD5C727157F80B1AC049435055589D6C7DE74F7A2948E9DB70928CB12782F907F927FE20BF8D79150175E8538E10A17F82BFD0CDE66EB7A785D7F7CA6F609DC46D84D6C10D470F7F49920115E990A81A86F246CB6BBB4E4C66871B995660D9D4E7BBC7E390D6015C5EDDAEBF8A0791761A2C30C2407A18419CDC05925ABF244A1DFE7DF1CF1FC4DB890EA6704FF1469347C9B998274D2DC990E5F0AC9E2C2956F8> |-/x <1C60D8A8C9B78C669F28CFA812DED67DCEB62F17AD12F7D7900E6AD3161B3BB6A9E88D307B5F8CC0D753B8AC565B099CC0ACAA4A7CA31F2811E297F44D0DEB72F7C315759FD2E63382EDE3061A24E5309BEE98D8290B6BC9B628BEBD7F7D73F1B5EA640583D87E4AD24CB7F7908FD9A3DC9303785637F3B203908DF84330922688D7A03D094D4EF700DA6BD8427088868109E238A57C22F5759A9FC99E5C3C3F2D6B15D44C534041C741DF56BEDC796180345856EA6BBC1BD98F587E929532F631C96BE91F404EF68AE1203A5AD95C9FFBED9A1E5A7A1275795AE78846990825436FB611A109B66853254DCAC13E4C6298C531E7AEB98A1184600057B10A9DAB09484AF36A38858BAF4BD8E53752011A5652B9FACEB6B61F17736A8E4776835DFBDE552410043F2D535B01DBC3DAA1EA0A782CE3B35114AE12> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUB+CMR10 /Encoding getdup 43 /plus putdup 89 /Y putdup 120 /x putpop%ADOEndSubsetFont
/LLSDUB+CMR10*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 8{/.notdef}rp /equal 3{/.notdef}rp /A 4{/.notdef}rp /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 4{/.notdef}rp /Y 5{/.notdef}rp /dotaccent /.notdef /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v /w /x /y 134{/.notdef}rp]LLSDUB+CMR10 nfLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf49.8062 99.4484 mo(tan)[4.24255 5.45456 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf65.5632 94.9444 mo(3)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf72.1142 99.4484 mo(\022)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf80.5682 99.4484 mo(=1+tan)[11.5179 7.87637 10.9069 4.24255 5.45456 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf126.629 94.9444 mo(2)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf133.179 99.4484 mo(\022:)[5.42624 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-121.362 122.011 mo(\(Youdonotneedtosolvethisfor)[4.24255 7.27637 5.45456 9.65022 6.06113 9.05455 6.06113 5.45456 7.84256 6.06113 4.84798 4.84796 9.65022 4.24257 9.05453 4.30249 5.45456 3.03055 5.45239 8.44797 4.24257 6.06113 3.03056 7.9025 3.33386 5.45453 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf43.0212 122.011 mo(\022)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf52.0422 122.011 mo(explicitly.\)Thenshowthatforthepotentialwe)[4.84796 5.75784 6.06113 3.03058 3.03055 4.84799 3.03055 4.24255 3.03058 4.85239 3.03055 9.07529 7.87854 6.06113 4.84799 9.65021 4.31339 6.0502 5.16003 11.4676 4.24255 6.06113 5.45456 7.84256 3.33386 5.45453 7.87302 4.24258 6.0611 8.448 6.35565 5.45456 4.24258 4.84796 5.75568 4.24255 3.03055 5.45454 6.63055 7.57312 0 ]xsh-121.362 135.56 mo(haveforthedeviationsfromtheequilibriumposition)[6.06113 5.14909 5.45239 8.49161 3.33385 5.45454 7.90576 4.24255 6.06113 8.48071 6.06113 4.84796 5.75784 3.03056 5.45454 4.24257 3.03056 5.45454 6.06114 7.94611 3.33386 4.27301 5.45456 12.7232 4.24255 6.06116 8.48071 4.84796 5.75781 6.06116 3.03055 3.03055 3.03058 6.06116 4.27301 3.03055 6.06113 12.7233 6.36658 5.45456 4.30246 3.03058 4.24255 3.03058 5.45453 0 ]xsh%ADOBeginSubsetFont: JXRAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUG+CMSY10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832959CA9D8768D378B31F9958CC81B8983D97B99095D96B7B13FD5F176637D1917CBA8C5B39E4DE518E3826A46DC89228CAF1C527CB89936763A26C8ABAEB05B83D697601A16F0C30F623A5565FC8C7E46B86FBD1170D03B6D86481EAED1D0448D97ECF43080CACC56F8DC5EAC27FF2F85FE282F323992DCE58CCAC225E57C7133C46859EF9ACC558D046684C86AF46342> |-/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E5029725A48EA4986EEB92642FB15114D993A3E4D78166C9507F82BF07B5E46AE791E48C3B5D13848EE2A0ED390B8EF77240E758B367FB2AC0AD1619CE65A4D162564D60A402AEB4F44AD0059F796DBE87333B0184A0747010482EB8790381C7873A7095E3FA12E2A8882D9D79D84512274A394AF253DDAAA1469882951252A742985603D0073C85F20BAEF47B61A9ECA7243ED> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUG+CMSY10 /Encoding getdup 102 /braceleft putdup 103 /braceright putpop%ADOEndSubsetFont
/LLSDUG+CMSY10*1 [17{/.notdef}rp /equivalence 14{/.notdef}rp /minus 43{/.notdef}rp /L 25{/.notdef}rp /braceleft /braceright 152{/.notdef}rp]LLSDUG+CMSY10 nfLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf135.214 135.56 mo(f)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf140.668 135.56 mo(\016\022)[5.26251 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf151.051 137.197 mo(1)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf155.783 135.56 mo(;\016\022)[4.85239 5.26251 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf171.014 137.197 mo(2)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf175.746 135.56 mo(;\016\036)[4.85239 5.26251 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf192.356 137.197 mo(1)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf197.089 135.56 mo(;\016\036)[4.85239 5.25162 0 ]xshLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf213.698 137.197 mo(2)shLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf218.431 135.56 mo(g\021f)[8.48727 11.5069 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf243.885 135.56 mo(\021)shLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf249.302 137.197 mo(i)shLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf252.683 135.56 mo(g)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-29.3168 167.298 mo(@)shLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-22.9189 163.339 mo(2)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-18.1869 167.298 mo(V)sh-35.9628 171.951 mo
-2.75281 171.951 li
@
0 gry
%ADOBeginSubsetFont: CMKQMX+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUC+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/u <1C60D8A8C9B7FF2B5E691B594ED192F8DAF34DFDE1D2AAEDCD429841AF03FDEA037486B5217B1B05A5EA4ABDFB35DFC78D2367DC40D1F110D583E8EBBA49C004ACD629A48271FCE64CD04E93EA587D6991CFE1813773F316554FB187F1A27AAE160963B619280C2DE705C3EE513DCAC3176102E1BB76490EDF13E368D3E2693EB823E673110833B73C97BAC15E18A7F2AA5836D9B258FB3639BFC56A0204B2679716898C8E599CB663ECF34E857BCBAFDCF77253C3818BB386D1F1C2BC8D3C0C6EC202486664411D1ABA0B85E128> |-/v <1C60D8A8C9B757A3CCA419203BF94D2EA809857FC5AEAF28AEF59E6D5D4595243375EAF5326012C4167BD7F8B392426C632C6BD60C506B533235B57DACEE5845AF98B9556028F4CB4A4DE219381CDBF6B35E72D60AF0075649B899EACBAA65356AEBEB0FD0694026C4EFD6A1484FCF2301F1B9CB02C37F17D7273BD89FBFD7D50E022EDB45C8AF26A82D60B86E25FEB1CF67FA> |-/w <1C60D8A8C9B63EE682F71457722A7C10F63B8BF0FC39EB4308901C88A93118D378480E75480AD7F79F5F3C0F19218D3E26F0BF347BCC16F8C0C511E066319A536DFCEC607A7530AE82F11BCC1C5E91484F3622E8BB262EEAB0BB6AD55BF6A403A3F57F5C94D0821D8B79627B73E22CE67B546D7D2C0A513B27AD06F93FFB2F65904515BBA20972A27D47CFFFD3C9679B699A9C5B08A0C4C2D00EBF7478806361E7EC8D35F36D9A8CF873DD17EA7E7E9B10AAD63C5089E29EB35F740B3431A2AAE2EE66ED3AC732DD3A6DC099B6D943D540FA8F7EBFD79C1BB337EB126B9301A020BD8AB05C0EB5A44C565A81924BDD47> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUC+CMMI10 /Encoding getdup 117 /u putdup 118 /v putdup 119 /w putpop%ADOEndSubsetFont
/LLSDUC+CMMI10*1 [14{/.notdef}rp /delta 2{/.notdef}rp /eta /theta 6{/.notdef}rp /pi 4{/.notdef}rp /phi 27{/.notdef}rp /period /comma 4{/.notdef}rp /partialdiff 18{/.notdef}rp /S 2{/.notdef}rp /V 13{/.notdef}rp /d 2{/.notdef}rp /g 4{/.notdef}rp /l /m 3{/.notdef}rp /q /r /.notdef /t /u /v /w 136{/.notdef}rp]LLSDUC+CMMI10 nfLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-35.9628 182.161 mo(@\021)[6.40254 0 ]xsh%ADOBeginSubsetFont: SBVPMX+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUE+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/j <1C60D8A8C9B76E37ED91DCD4EB7DD687F7614CCB8475B9F904D077FE9814AA93E69D1175F4E6802EA1788AA27F72433F5895683211ED59EEBF5D32EE079C81F6B97C55B2EFF7C16A1EA01882B71DB511EEB4E75639E7B4B4E3712E9446F279B3A7354BB80EEDE38A76761ABC62936A30CD62332A5160A2BCEEA1EDAE79F1A81AB9B05D1BD5EDDCF488B99F7B8A779BE2C6056B8B82CEECD0C28C90D96DD0> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUE+CMMI8 /Encoding getdup 106 /j putpop%ADOEndSubsetFont
/LLSDUE+CMMI8*1 [59{/.notdef}rp /comma 45{/.notdef}rp /i /j 6{/.notdef}rp /q /r /.notdef /t 139{/.notdef}rp]LLSDUE+CMMI8 nfLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf-24.1488 183.797 mo(i)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-18.9498 182.161 mo(@\021)[6.40254 0 ]xshLLSDUE+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf-7.1348 183.797 mo(j)sh%ADOBeginSubsetFont: JQBAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUH+CMEX10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/vextendsingle <1C60D8A8C9B81F2C3196B5E8E88636FF86FA721426E8522734B81E6E0C9283367B4C0F4D55576A958AD873872611201FDC> |-/parenlefttp <1C60D8A8C9B69E59C87F3DE8F805DBA6A72A7B06FA96C121ADD04A0DCFA086DF2797B262404EA3F5C1BA6721D62E261C3B6ABDE53D6A40860D4A937CA02B8D17747C950CD8FDFCA5AF242CACA7260D1063E874D70A9C4E7D82B0E0AD7310D48E9F288F09BA350425E99002> |-/parenrighttp <1C60D8A8C9B69E59C87F3DE8F805DBA6A72A746090BFC3B86355945C7641244B01693B9057FF520AAB3E87EB0BFBB013ECF7D0064E4B96677AFFA6FDE5875C93A6069816EB57279929559EF7AE281656F8310B77C26B8BBA1E0E71D6E0DC87358B76644F64553F1FE7E2> |-/parenleftbt <1C60D8A8C9B69E59C87F3DE8CF35D5351C437B0DF4CE0EF69B7BC7BFE9C3C954F06BB5D0B34A1B940B24B0310C38854DC04E86A7F9C87D929CFB49A528272739EEE3707F539192BBF7B6434A9C1CFA9BAE671999283337400F2D3248431ABF2B178B493CB59A> |-/parenrightbt <1C60D8A8C9B69E59C87F3DE8CF35D5351C43747917175069BB664F35C7A25E0333BFEC9A9BA9FD6CC6F7FBAE2A85A6933E611C80F070BC6C549273F76C011860EA46E4840BE52137B5E545B61289BFD6528F39326614270BF5E74E5BB5A9F376F12CA585AF180198CD4C03C8E4A6A9ABB8> |-/parenleftex <1C60D8A8C9B69E59CB076EE8F39B49AFBD4C46EF723CFB41365045C0349D6B957921F9BDCE9A0AEEDB27C0E1F14E19EF86A8F50EE4> |-/parenrightex <1C60D8A8C9B69E59CB076EE8F39B49A09E47FF4A3E7963BAB9106D337BA6C85983C095EE956EA86D1391175BECDC2AC77794AC55C6> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUH+CMEX10 /Encoding getdup 12 /vextendsingle putdup 48 /parenlefttp putdup 49 /parenrighttp putdup 64 /parenleftbt putdup 65 /parenrightbt putdup 66 /parenleftex putdup 67 /parenrightex putpop%ADOEndSubsetFont
/LLSDUH+CMEX10*1 [12{/.notdef}rp /vextendsingle 35{/.notdef}rp /parenlefttp /parenrighttp 14{/.notdef}rp /parenleftbt /parenrightbt /parenleftex /parenrightex 22{/.notdef}rp /integraldisplay 165{/.notdef}rp]LLSDUH+CMEX10 nfLLSDUH+CMEX10*1 [10.9091 0 0 -10.9091 0 0 ]msf-1.55679 158.86 mo(\014)sh-1.55679 165.405 mo(\014)sh-1.55679 171.951 mo(\014)sh-1.55679 178.496 mo(\014)sh%ADOBeginSubsetFont: KVXQMX+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUD+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7CDD8B4397BC5D546373275BA909D41337177A39F41B58C96866A4C171F786C9B49E0B845D6F92D561ED969B60685344F4B3DE87DBA038984A25C9A3BB855F4BE09D2B653E4B0E57C4942F5E843087B81EB813B74925AF65E3A479E3B2E9C034B803FE5EE7939682697FC076E59CAED8A56821B085006724DA544D253B65E7F266FF76BD33F328219> |-/e <1C60D8A8C9B74383EF980222186AC412A37061F7DA1A075A58C4EB92AF05251C4F544837EE77DF2FD3FD46B59FD3554B7172B19B99F4BBA7EB9A3F6A9B54C1050351BB54E475583D5D0877A11CCAC1C029E4402750715303229C0A8A7556406100EEAD8CA3E3685225736E4C7D6700DD8B4CFDDA19A31D> |-/i <1C60D8A8C9B845C80829510E46B066D617592C2752F4719A972C90DEABB522FDEAA3EF457E51B858973B4D0B0FBB25EFBEF1DBC7CB2D0C715C3BAB84315A0C25E75381301FF942ED170560D3DC9F01113C33FA4E643697198914D9405D4567A946F198597C5B4B842DDE84CF67B10114310ED3022D924089FBA3B4> |-/l <1C60D8A8C9B845C80829510F2B6BB6DDB6DBD81EACB6BC16C2545FA3EAD2BC6F384F7DBBF19F0060CFA1157B24C1E5ABD97E4D5EF2C31AE2D7E682D087F247A450CCBCD70D5B46AF891DDA7EAE02F47171CED31962EAE834F0D1C6F815> |-/m <1C60D8A8C9B59B43992944ED490C19A15D8735441315F95002383D7FB55CBE87771592826C484758BB609F7DA8BB17A0AD5F34356927AD6AEFDB58A28643E71533CEC1200C271AF80201C51CB23AC4E21EC48E2905B47AF54251BE0EFD9D868C76E0679EE191CAA0999955AAF990983016435DE0E01D02AE248F5D5EDBD10DD3A3DEA4A2800D6A621A3BA50BF1580431497240FD20A31D470DC52CCDE58A4C6324A0F849B194B7185D6A197C82E6492E54FB3F79F4634E1835DA3CE502B62DDEE63B11A0797EF3C321B60CE1648C96026DA5BFFF88D8ED804E6814DE911E94BA75231DCC793D2DCF52A70D33A7C8617207C4D09DDCE6DFD800E0BF281FF22E0A5D8D71AED2E5D1BC45CEA583B1> |-/q <1C60D8A8C9B7EB086E820323913A497FFD993E948B1BBCCD51FE9C56B49A31CAC4F95ED4EF0104A4B8F322C3729180AD53361EDD45ABEF696E76F70A124165F850E77F61C413C9DBBA3618084CA795D2FA281C92A47BB1E9715D4EBAF1794E2B8E727F7FF92BC130D5F9299CAA52CE7F57077D35DB3ED48F47FB11ECD70CB1F169336641357C1DE74BF95E9C35635A89DA20FABA88AE407A837B9A30A88933A0> |-/r <1C60D8A8C9B71DE7AEBBE327700164145A7987C663F5708624971209183C1AA5AE7985618809D8530182A6954B7D298F8533949148FD10D074ECCBB0E4BD9237A4CB4A90465D136A5C2F39F0FDE2A674B4B320C16AA9A48F8E602F9DC5BA66848AB29267CC1A9D2762085785E6610E9CC9E8C5B6B4186371F402E776D132214C560E0505324D5C14EECA9A5B> |-/u <1C60D8A8C9B7CDD8B4397BC5C54C67A59D54BF3E30C4F705D24054AF402519E3BE071AD7D52923E6CC431686D26A514C0341C8057C4D1AF43DBC925E2B88457377B8C53FDB1A63A50921FCB8EC4ECDCCCC14530F53D8C66EEDB79E4CC12CD217E5B4> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUD+CMR8 /Encoding getdup 98 /b putdup 101 /e putdup 105 /i putdup 108 /l putdup 109 /m putdup 113 /q putdup 114 /r putdup 117 /u putpop%ADOEndSubsetFont
/LLSDUD+CMR8*1 [48{/.notdef}rp /zero /one /two /three 46{/.notdef}rp /b 2{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m 3{/.notdef}rp /q /r 2{/.notdef}rp /u 138{/.notdef}rp]LLSDUD+CMR8 nfLLSDUD+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf2.07921 185.845 mo(equilibrium)[3.76347 4.46968 4.70476 2.35201 2.35202 2.35202 4.70477 3.30035 2.35202 4.70477 0 ]xsh%ADOBeginSubsetFont: UPEAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.systemdict beginLLSDUB+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/question <1C60D8A8C9B74383E5D7C91BF2A32CFB0191C50F8E26E1E5F65BB77CA7DAB7121D58B5B7D7D8950FF9A125AF6CE388F9B4242A95AD3F8E23C0C526DE379349C29CFA5D95D7C42538685DFF4ECDA2FBF5B45E02820C320D0F6FD75AB5D0E995B22C82C26935E381E3216A1A4C09E2CB7C0DFAD618BE7DC6460CBDB636AC660239E7EE08A4BFD519C7116C68A7A88D56B30BC88C7098EBCA85A15A3E9FFF54CF882ED3D046CB9C2E6D29D0FB1CEFD0D9> |-/W <1C60D8A8C9B505563364AC8BE8AB65E15C6C08AD458A3C49B32AF7A6889CE67A7C3A7AE930FDF331D78AF6B2774B2E2F9165802F51899041EFBD3924C43ED76A472FF8E62DD42BB26872119346C8E5FAE87DF4A5B6404CEC1023A1889FE114BA5E56D8DAB21B203F5E6D874C0E17030C65A10469C5F86A53A7D1CFDBCD0E6B94604F94EF6BECF776BD9FD84BFC7AF2D1AA08788921B6CE8FD734B2E9372ACA3C7D976E4DF8C6EED1CE088EB43DC42B2D6388D9B8E9E4C6FA2D7E84106976063DE8EEDEDD5065F70DF6158531A23BF77B8F77A74E19614095CB2049840CA4D0D45F1041ABD9861325F1156E78D91D6A706606395E26954346A8584D3C7D06B32B91751B6AC28A5309BAC9B774A4A1514E73B9AA13764701722D129040EC> |-systemdict /gcheck known {setglobal} if end {end} ifendLLSDUB+CMR10 /Encoding getdup 63 /question putdup 87 /W putpop%ADOEndSubsetFont
/LLSDUB+CMR10*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 8{/.notdef}rp /equal /.notdef /question /.notdef /A 4{/.notdef}rp /F 5{/.notdef}rp /L 6{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 5{/.notdef}rp /dotaccent /.notdef /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v /w /x /y 134{/.notdef}rp]LLSDUB+CMR10 nfLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf47.7212 174.678 mo(=)shLLSDUH+CMEX10*1 [10.9091 0 0 -10.9091 0 0 ]msf59.2362 146.205 mo(0)sh59.2362 165.405 mo(B)sh59.2362 171.951 mo(B)sh59.2362 178.932 mo(@)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf68.7812 154.337 mo(u)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf77.4512 154.337 mo(+)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf88.3602 154.337 mo(vv)[25.4258 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf144.789 154.337 mo(00)[26.5527 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf78.5712 167.886 mo(vu)[25.4258 0 ]xshLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf112.671 167.886 mo(+)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf123.58 167.886 mo(v)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf144.789 167.886 mo(00)[26.5527 0 ]xsh78.6832 181.435 mo(00)[35.2255 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf143.464 181.435 mo(w)shLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf165.773 181.435 mo( )shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf174.258 181.435 mo(w)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf78.6832 194.984 mo(00)[35.2255 0 ]xshLLSDUG+CMSY10*1 [10.9091 0 0 -10.9091 0 0 ]msf139.222 194.984 mo( )shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf147.707 194.984 mo(ww)[22.308 0 ]xshLLSDUH+CMEX10*1 [10.9091 0 0 -10.9091 0 0 ]msf182.361 146.205 mo(1)sh182.361 165.405 mo(C)sh182.361 171.951 mo(C)sh182.361 178.932 mo(A)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf193.725 174.678 mo(:)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf-121.362 213.19 mo(Whataretheconstants)[11.2124 6.06113 5.45456 7.87527 5.45456 4.27303 8.49161 4.24255 6.06113 8.4807 4.84798 5.45454 6.06114 4.30247 4.24255 5.45454 5.75568 4.24255 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf-5.4528 213.19 mo(u)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf.792191 213.19 mo(,)shLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf7.45918 213.19 mo(v)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf13.1382 213.19 mo(,and)[6.66328 5.45456 6.06113 0 ]xshLLSDUC+CMMI10*1 [10.9091 0 0 -10.9091 0 0 ]msf41.0172 213.19 mo(w)shLLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf49.1202 213.19 mo(?)sh-121.362 226.739 mo(Thenshowtheeigenmodes\(i.e.frequenciesandeigenvectors\)forsmalldeviations)[7.87853 6.06113 4.84796 10.5339 4.30249 6.06113 5.14909 12.3622 4.24255 6.06113 9.32071 4.84796 3.03058 5.45453 4.84799 6.06113 9.09052 5.76001 6.06113 4.84796 8.77522 4.24257 3.03055 3.03055 4.84799 10.3942 3.33386 4.27301 4.84796 5.75787 6.0611 4.84799 6.06113 4.84796 3.03058 4.84796 8.77521 5.45456 6.06113 10.5339 4.84796 3.03058 5.45453 4.84796 5.7666 5.45236 4.84799 4.84796 4.24255 5.45456 4.27301 4.30249 8.71527 3.33386 5.45456 8.74573 4.30249 9.09055 5.45453 3.03058 7.5033 6.06113 4.84799 5.75784 3.03055 5.45454 4.24255 3.03055 5.45456 6.0611 0 ]xsh-121.362 240.288 mo(fromtheequilibrium.)[3.33385 4.27302 5.45454 12.7233 4.24255 6.06113 8.49161 4.84798 5.75784 6.06113 3.03056 3.03056 3.03056 6.05022 4.27303 3.03056 6.06113 9.09053 0 ]xsh136.433 364.364 mo
-5.30182 364.364 li
-5.30182 253.564 li
136.433 253.564 li
136.433 364.364 li
/1 
[/DeviceRGB] /CSA add_res
/1 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 240.436 44.509 ]ct
[142.86 0 0 111.926 -246.3 -320.418 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 254 
/H 199 
/M[254 0 0 -199 0 199 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 254 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 254 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 254 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K`;)PrVl`preLN,rrN,trqufq
L]<&-!WN$"rVZWnLB!#."9/;oiW[#sY0$55M#W50"9/;nis!T@_q"AXM#W50"9/;nk69PdeDg3$M#W50
"9&&HEs=WR/O#Hmre^Z0rr`5pfp`2!H[U[VpATpKLAqASptN:_Y,SG+c1h3os+gUWrqG;k)?q)r'bhO^
r/(H/rri>qhNN9jI!^0bHFWm0s+gUWrqG9QWs5Z+Wi<#FrJCQ0rri8_\LJL'*#0;$'12Kmrepf3rri8]
\:/f2H";,CH@ttjrepf3rri8]\u_t=W/@FMWiu0qrepf3rri5RQP^DB*=!i%&f's7repf3rri2OSU5Yg
>7P@gH$]&Zrepf3rri2OWiN-*HP):2WN,Ldrepf3rri2JQPCSJ'EoNl(+/JHrJU]2rri2HRX/iW.gS%%
G'`TRrJU]2rri2ITrOFb2@)WTV5`n[repf3rri5PVa)+*%L"0j*+e[<repf3rri5NV0P`?'+%;PAW?6X
repf3rri5NV4hN-(("=kLp-@Hrepf3rri8`_f6Ft)[?ri+h7=Grepf3rri8_^ign-7hKYh35,+crepf3
rri;`^jRR9>SNY`7E,'#repf3rri>qiBS^p:^]cb*h*$+MZ8J3"TJ,Q5:HhX'RjL6R/Hr@s+gUWrq>87
.gLkHTlV?Dr;MTRLAqASPn\ZOXqe%S?R4Tes+^OUr0%nC#-A`F^g8;DM>r>1"9"E!Hj6bl[DQ8qi/.Jg
rr_4";>(4^*:WaM'N^.kLAqA5+&DP6mNCunbnjB:s+^OUi#b_e#4<T%prsUTM>rA2"S6FOi;ErZ*rZ*<
PT-\%MuSS4"S-=Nhu*iY+oVE?OWCJ#MuSS4"S-=Ni;ErZ+oVE?OWCJ#MuSV5"oY\NUAt5oruV1>"8,Yb
i/@VkrrrA+,G>):!WOACrr_pn8DoF+M#RYXYp5qArrN-Crr3)n<(Pr*s+p[YmR1.Hs8N-"*rZ*@bpS;C
N;n_6"n"cZnc/Uis!%FA"3`0IqMbH1rrqgY<q64i!WO>Arr^InL&-c.M#RO?+MRjT!WO5>rr`.Y+mk6g
M#RO<,/+!U!WOABrr`.Y+mk6gM#RO<,/+!U!WO>Arr`.Y+mk6gM>m\&)0u&WrrN-@r;QlM5=kI,s,$aX
b8Ya&rr3$!,5hHCeNZRrNW4k8"3VU-q>UBpruq=?"4]V+oo9!/rr_LW1ZA<4!WO5<rrT,-QAtp%rr_IV
1uS?4!WOA@rrT#.P`>^#rr_IV1Z863!WO>?rrT#.P`>^#rrSN&\GZ@-ruV(;"86%Mb)ZLZrrSH%[f$.+
s!%@?"8,nKaH$:XrrSH$[f$.+ruq:>"8,nKaH$:YrrUG!@/Ks)ruV"9!Zu4PO8k.<!m<<(qu6]s,5M6?
+)CS2s,6mYbV<E#rrN-Cq>UL;CA3ehN;j"UH8Xp`rrN-@q>UPl-F!K2s,?s[pj+d[qu6]s,5M6@TdR&B
OT1:>"8R7"kPP8[ruq4<"/.*GrfI/=rr]t^R/6^[!WO5:rr_[r6hc]BN;j!m-^X],rrN-Dq>UQb?UFLK
s,?s[]I0$Aqu6]s+o2-?mU&<TOT1=?"7J'Dlh^V^ruV"9"9,t]J<9ejrr_[G;=")Y!WOA>rr`85.=I<X
NW0+K1K!K7rrN-Cq>UQr]IA8js,R*]rHT0oq>UKq*r#[9HO%u]s,R*]r-'!kq>UKq,5;*=Gm_o\s,R*]
rHB*mq>UKq+nu!<Gm_o\s,R*\]Gl%hrrN-@p\t?[/P>>ls,R*\\fPtgrrN-Dp\t?Z/kP>ks,R*\\fGnf
rrN-Cp\t?Z/kP>ks,[0^j]">/q#:Bp*qoU9_Ae[8PQ-^D"6ENCm.gS]s!%1:"2Gq>qih&@rr_@_3UHP@
!WO>:rr^%VOo(@BOT,F\RNolIrrN-@p&>)81XqWgOT,F[R3K]GrrN-Dp&>)61t.ZgOT,F\R3KZFrrN-C
p&>)61t.ZgOT,FH.sCX\rrN-@p&>-O1NE8Us,d6_k::]Kp\t9o,5(s<hD9-IPlHjF"6V1Wp@nRfruq(8
"5YhPqNV#Brr`(/2UD*s!WO56rr`1g*k7I7OoGOZA2hg-rrN-Dp&>-lRif)'s,m<`q.)G0pAY0n+nbj;
r0nb9PlHmG"/cm"qtC$jruUh4"6ic9i0F>)rr])6Pl(1S!WOA9rr_Ia/`)cmOoGNZ(R4gjrrN-Co`#$W
;_?jks-!BahCqImp&>'m*qTC5bS5)_s-!BagbM@kp&>'m,4kg9aq\l\s-!BagbD:jp&>'m+nP^8b7no\
s-*HbqgBF9o`"sl*qK=5HQB?iQiE9L"8dHcf(AtCs!%%6"*bokrg3YKrr`.G)qX`^!WO>6rr[KfYPsmg
PlCjb]I]'6rrN-@nc&Y[=6Z(OPlCjb].Js4rrN-Dnc&YZ=Qu1PPlCjb].K!5rrN-Cnc&YZ=6Z(OPlCj[
<DMlOrrN-@nc&^%.\$F)s-3Ncp/FfPoD\jk,4Y[8\1=!HR/`EN"8>eilLY#Vrupq4"1TkLrg<_Mrr\`6
Y5Rtl!WO5:rsS7F2CLA@mf3$)-g-lsPlCiQ,H^q9rrN-Dq>UijI5i`8MXCH;G:2O?s-3NcQm8a3oD\jk
+o2-GmX@,G22^f$p3%eFR/`HO"5k,4p[\=bruV%:%J<^Yd/V<K9(;l11L'^Ds-<Tdh]->(o)Aaj,5V<K
oM[Zos3!>mn,Lfn=S\BbQ2^sD)e\p9rrN-CqYq#s;`2o$b;W#]s3`c,qO.ALrr_[k-I_Mb!WO5;rrR3i
c2R_Jat@f9s-F(hRK&TQ"792<dII5;s!%=>!cT[5rr35F067*mPmsLVs-EZem8ta`nc&Xi+o;3?E@]63
rs-Y!ErZ0)%&00iQN%#])56R"!WO5<rrUjmEW,nCqf*A,s7/cBe=-E'rrSl5T()a\s!%@?!n\Q5rVm0#
E#7:/njkdiRfA]R!hgO)nG`Oh+oD9@fH"r0rs8L?(Yeu\83,.fs-N`ff/m(1nG`Oh*rGs=U^XI)rs5>)
QN.!P,CoW[s-N`feiQn.nG`Oh,5_BATb"7&rs55)PQ1[M,CoW[s-N`feiQq/nG`Oh+oD9@Tb"7&rs55)
PQ1[M,CoW[s-Wfgqh?`[n,EFg*rGs<H5$2U!o=<,rr3%Z,JorMR/[9cKIu'LrrN-Dqu6\A'`7n3g^eK*
rrS*(_41Ilrr`.P/D]dp!WO>?rrI?Yqu6`Q%s%[L!fJ>?S,\lU"3i-Lq!\4`ruV(;!G`\PrrVj*>Q4X)
k"\_GSH"uV"3`'Jq!\4`s!%@?!GWVOrrVg,>5nO(k"ebFSH"uV"3`'Jq!\4`ruq:>!GWVOrrVg,>5nO(
k"\YDSH##W"8"cIiU6^HruV(;!FHK9?NCO6rr3*!YU#0ts-`lho0#V%mf*=f,5_B@?PN?G!=i'-rr`5'
-&S5mRK!B\4@e>trrN-Cqu6\('`)5=%TEB,"9#DLMOa^7rr\#c\Gkpr!WO5<rrHISqW._o=oJ@'qJ-P-
TUu1Orr[rd[f5^p!WOA@rrHIRqW7er=T/7&qJ$S,TUu1Orr[oc[f5^p!WO>?rrHISqW7er=oJ@'qJ$S,
TUu1PrrU1aA*j3rruV(;!G`;ErrVKp?Msg+h[p)olC\*FrrU+a@I4!ps!%@?!G`AGrrVHs>l=U)h%L)q
lC\*FrrU+a@I4!pruq:>!G`AGrrVHs>l=U)h@^,ql(A!Frr_\%1\0o4!WO5<rrRc_kktG^apNLorrr;,
&d1\aTDtD\"79_Vo'HAWs!%@?!e:mGr;Qi>%XJ$Q"o>M<#=d^Fs-s#jm:S3Fm/I+d+oD9@J.^uBrrU7O
H2[aHqm$k?7cL'?SGr]jX=:=<rrN-@qu6_j$_I:r!h0Iprr32uW$hcO*R:;WSGr]jW[P"8rrN-Dqu6_g
&"ELs!gj@nrr32tVCDfU*mUDXSGr]jX!k+9rrN-Cqu6_g&"ELs!gsForr32tVC;`T*mUDXSGr]e11BY;
rrN-@qu6`m/6VoN!bEDJrr32S/-Q.Z"aZg@SGr]e0k'P:rrN-Dqu6`m/QhrN!bEDJrr32S/-lIc#^E!A
SGr]e0k'P:rrN-Cqu6`m/QhrN!bEDJrr32S/-lIc#^E!ASc8fiHRd#"rrN-@qYph_+dr*)pR<@gr;Qua
;\1&]("&]SSc8fiGq6etrrN-DqYph],+&'(p6m4cr;Qu_;A18d(=/ZRSc8fiGUp\srrN-CqYph],+&'(
p6m4cr;Qu`;A18d(!iQQSc8f(%>FWCrrN-@q>U\\5CSrE5_f16rs-IgK@>`72sR+:Sc8f&%tj]CrrN-D
q>U\[5(ArG5D8q3rs-CgJC0632sI%9Sc8f&%tj]CrrN-Cq>U\[5(8lE5)&q4rs-CgJ^TE42sI%9T)SoO
5W.omrrN-@q>UZobd=OYbk:o6#jP_Wn,NEu%#(DTT)SoM5r@olrrN-Dq>UZobI"IYbOtf5#jP\Vmf3<r
%YLJTT)SoM5W%fkrrN-Cq>UZobI"IYbOtf5#jP\Umf3<r%>1AST)SkN'AhsQ!WO5.rrSQ0_#F?9r,*ju
UAphb!fRlLkl1\`,45C3Q63m@rr`16-buJVT)SkN'\qpP!WO>1rrSK-^]+68rG*gtUApkc!m30Ekl1YR
!Tb<irri8>,]rSTrr`3XA+$,lTDnu7072p_!:g0O+7K44r5Bn$nGW@hrAA'OU]6td!m**Bkl1YR!TY?k
rri8=,BE;Prr`6X@d^#kT`5,lAjYPBrrN,!"%*I1mdgA\nYR:/h>@3RX!F[>s.KAor+8:Ul2Le_W<5Hs
]^>:i"S&</=kiiR!i[KDU]7"e"8latj6?REri#ud&%q<#rrhkg*Eh.orrT/GVka9brr]/CUAX9U!WM!\
L(5G(NnO+*"Pml8BB/jg"7BbUn"fuVrr])BU&=0T!WM!\Kb>Y-N7[b&"P[]7A`ERd"7BbUn"fuVrr])B
U&=0T!WM!\Kb>Y-NS*q("P[]6B&`[e"79YRn"fuWrr_[(=o7@]$2YaO7hH4eHbfRVrrpe^(EK%Aq#:E@
-tT4SU&P5^(0UOsrsAQGZUGN?1O-V1qu6iGA/QGWq=sskbUR+us.TGpm1rh$k5Pbb+gaZO&i+[Fr;6Kt
cXRe4S,)jZ!mE-'V#R1h"8?FEc/ns=ruV4?gm;.s*YUFp:fKY/*@u9dp&>)K$*L-)UAk>hAf8eRrtGDV
s8Uf;=>D!71cnH14XhI+ES:$b!eq,aV>m:i"8?CFbN8a;ruqFBg6G_p+;Qao:/X2&*\VKcp&>)J%'-6)
UAk;#+.)'g!WO5=rsJ,,TojtOGCc-hjR`BRp,tk%VZ3Cj!jNl5jSo8\,5hHJlb&jOK6_`oQa>]Crr_pV
7c1*CUAk;"+I2$f!WO>@rsJ))TTFeOH%D<gj7E9Qp,kh%VZ3Fk"6<0Oq;hPVruU2""4S`Uq5=7frr_:U
:&3lM!WOA'rr^^tL\ReIU]1GV9hkHErrN-Cir9,0-]%Pqs.fSqS0-#9rrN-@ir9,ZKHf!Fs.fSqRifo8
rrN-Dir9,ZK-JjDs.fSqS0#r8rrN-Cir9,ZK-JjDs.oYsi$WsIj8T/[*o[,$hEt`JW;i[n"5kMSpZ)8S
s!$G%"5Q=OqPaFirr_1+IJ;e%!WO>%rr_(E?i$`$V>gYm769,]rrN-@iVs#XU`?>3s/#_tpHq$pir9&Z
,2rP(qkG1/W;i^o"8>2Ef])o3rupA$"8no7VPsNkrrSAhUZ)4RruU+u"7oV=e#EADrrS;iU#H"Ps!$D$
"7oS=dAd/BrrS;iU#H"Prup>#"7oS=dAd/Crr^e'>5mL\!WO4urrVKtC8q61rr^_'=8q1Y!WOA$rrVHt
BrV-0rr^_'<rV(X!WO>#rrVHsBrV-1rr_h2.IQ-o!WO4trr\E/Wr9!uVuHkiE%124rrN-DhZ!\=,H1RA
s/5l!no#rDi;WiX+l<5$O<^b'X8f*t!jsJMhu<`W*o?o!qGg,MX8f*t!jaAJhu<`W,2W>%qG^)MX8f*t
!ja>Ihu<`W+l<5$qG^)MX8f*t!_$;Xhu<`W*o?o!rkL(?X8f*t!^p5Whu<`W,2W>%rk9t<X8f*t!^g/V
hu<`W+l<5$rk9t<X8f-u!d>WkhZ!WV*o-bsKG*ONs/>r!EuqXDrrN-Dh#@G/'BlOtW;cpA*jXZ&!WO=u
rrRfckcFf`rrULUGMW9"ruTtq"5Gk(n?)_irrUIVG2<0!s!$7u"5>h'n?)_irrUIVG2<0!rup1t"5>h(
n?)_jrr_O_0At[d!WO4qrrTD7P-+barr_L^0](Xc!WO@urrTA9OfeY`rr_L^0](Xc!WO=trrTA8OKJP`
rr`.c)9(D2!WO4qrr`./1<m!%X8`;!Ql<ourrN-Dg]%BQ@Pc62s/Z/%qj/5=h#@ET+l!#!qdMA*Y5bR&
"5GhUrnRMSruTno"8+*cpTOUtrr_"7E;nYm!WO@trr_pBFnW$=X8`:U2fScOrrN-CgA_9J-[#-ds/Z/$
F#)>$rrN-@gA_9RU*RFUs/Z/$EAQ2#rrN-DgA_9RTd7:Ss/Z/$EAH,"rrN-CgA_9RU*RCTs/c5&\K?t0
g]%<S*ngPql<6@CYlCg)"1KD6q:koMs!$.r"6iuOoW\@srr]bRO8@W2!WO=rrr_Lh4S5lXXoALa.8B6a
rrN-@f`)#e*c\FaXoAL`.S]?brrN-Df`)#c+E+LaXoALa.8B6arrN-Cf`)#c+E+LaY5\V&F9p+DrrN-@
fDbno&&GONY5\V&EXU%CrrN-DfDbnl'>CaOY5\V&EXU%CrrN-CfDbnm'#(XNYQ"_'\gN']rrN-@fDbsD
02CZ8s0)G)rOFA+f`)!P,1lhsnM!`"ZN%-."9#_XIb=Z$rup"o"7\$=jg+oirr_Oh8b(I5!WO4lrr]q\
PPMQbYQ"^i=\/)8rrN-Df)Gia-'J)1s0)G)ku^LHf`)!P+kHYq]-WX9Zi@6/"/7'Orn.5OruTbk"8[C%
j0Schrr\o>\Gk.\!WO@prr`+E1ZGb@YQ"Zs-+MS,!WO=orr`+E1ZGb@Yl=h$,]3/)rrN-@ec,a!1LL-g
s02M*p`jYHfDbmO,1Z\qcner+[/[B1"8O0Xo@O!Cruoqm"4/i0rj;^1rr_q!0?r)J!WO4jrrSZ+]<qUC
rr_pt0[/,J!WO@nrrSW,]!VLBrr_pu0[/,J!WO=mrrSW+]!VLBrrT#+R+;3;ruT\i"6r]7hmNKhrrSr,
QIZ!9s!#tm"6iW7hR3BgrrSr+QIZ!9ruonl"6iW7hR3Bhrr^q:8G:U6!WO4irr^jbFSN<EZMt$Y4\,4r
rrN-De,KO$&p3oWs0DY,f0)Usec,[M+k-Gnee)uu[f<]6"8RHhimdu/ruTVg"-FnBrjVp6rr`(H+5t`L
!WO@lrr\9.]Df;>Zi:.'IidRurrN-Cdf0E0-bKAes0M_-_CUTBeGfRL*n(&jo1)pN\,Wf7"2QRFr7(`I
s!#nk"7o#am^N5&rr^(hM#>d&!WO=krr_j_=73QtZi:)%8Dqts!WO4hrr`5*.[ddGZi:)$8`8(t!WO@l
rr`5).[RXEZi:)#8`8(t!WO=krr`5).@@UE[/U5a*2rhbrrN-@dJj=DF<KAKs0Ve.Kc[,he,KIK,16Dm
pN%M2\Grr9",.enrR:cIruoei"8Hp[g:70jrrU^fB[Qh\ruTPe"4/;hq76O5rrUXeB$pVZs!#hi"3r5f
q76O5rrU[eA^UMYruobh"3r5fq76O6rr_^q-J[#K!WO4err\f-T)?2"[f6Hu>US7QrrN-Dci4*:(nCN8
s0hq0mp%6odJj7I+j^/jRi%[n])T8>"8o#?XO-tJruTMd"8H.be[kdirr`1q,HB,j!WO@irr`%#51I1D
\,QR.V'E"errN-Cci4+B><UKIs0r"1jZmMRd/O.H*mXcfhC=!L]DoA?"6Dd\pX&p@s!#bg"5PGTpq-R8
rr_@JBD9dQ!WO=grr_(,IJCGS\,QMZ-d0j9!WO4drr`.]+k=4)\,QMX.*Bm9!WO@hrr`.\+k=4)\,QMX
.*Bm9!WO=grr`.]+k=4)\GlZU+c#s@rrN-@c2Rn)9M"Zcs1&(2b9;W:ci4%G,0g,ii(Z]0]`5MA"3VjB
qp59CruoYe"5lmDn%A\2rr_UO6K6;j!WO4brrTPFLqNburr_RM6K-5i!WO@frrTJFKtRGrrr_RM6/p2i
!WO=errTJEL:mPsrrRl]]$:6UruTDa"8ZUM`kDD_rrRi_\'=pRs!#\e"8ZOM`4c2]rrRf^\'=pRruoVd
"8ZOM`4c2_rr`8=.r``4!WO4arr_[=@.:o1]Di!4_^oZKrrN-DbPq\3.UVYYs1843_^oZKrrN-CbPq\3
.:;PXs1A:5nnC2Ibl7_D*m4KbX!XY?^]1qG"7g.fjim`*s!#Vc"0!ZDr4i9Drr_h+3p"Tc!WO=crr]8K
U\qn,]Dhu7-`?perrN-@b5VS9Aj>Xss1A:5W[F\Bbl7_D,0KofoOU8R^]1qG"0*cHrQP9BruoPb"8$.g
m(`S4rrOQWo#q%6ruT>_"9-7kCVTn]rrOQWo#q%6s!#Vc"9-4kBYXSZrrONVo#q%6ruoPb"9-4kBYXS\
rr`.3,/_S'!WO4^rrRrh_nc;crr`+/,JhP&!WO@brrRoi^qfu`rr`.0,f.Y'!WO=arrRoh_8-)arrT\A
MTPl!ruT8]"6Mj0k/%)2rrTYDLroYts!#Pa"6;a/jh^u1rrTYDLroYtruoJ`"6;^-jh^u2rr_1O61W.t
!WO4]rr^1XKDNIb^Ae;m8jMpgrrN-Da8Z7Y)hRq's1\L8hb$0(ao;DA+ijTb_A\%&_Z.CN"8nH'hoPfu
ruT5\"9"$*ahn(mrr`1b)rJa:!WO@arr`4R/BG^.^]+E6Q5\Z%rrN-Ca8Z8?Ke(6]s1eR9fI_OIaSu;@
*le3^l8rDH_uILO"4o/Qq8iR:s!#J_"6qsToY^^Drr^k*I/1k`!WO=_rr_OJ?hD89^]+@B52"!V!WO4\
rr`5#-*P5d^]+@@5M4$V!WO@`rr`5"-EY2c^]+@@51mpU!WO=_rr`5"-EY2cci4XWrVQEcm+0k`q"jme
s8So4SG^G-!WO4[rt+U//*-^/r;-6`jO2lUq>1';s3L]Xrr)`iq!Hknp%S:Zrr<"m)OpZFrrN-D`W$M;
@k6U=rquWfp?1,go_A:]dJqPm')qk,q=sLCl1OiJr;Q`rU)KO!a8Z2?+iXHmmUIa,rr2ilq"F.<lh1&M
rR(YmrtGD/p!/V,.k2be-9H4AgA9>@;#833!WO4Zrt<Qm?MX-+Mc_b`+<i*qENJL(rRCkprtGD/o[Tn$
K7\Q#J;';qhYGVC:AW!1!WO@^rt<Km>P[d0Ul:"XI=?^#QFuV_rRCkprtGD/p#3ltYck+-XKT.WkPEXM
:&;m0!WO=]rt<Km>P[d@_6^DLWiE/)\^BsFrm^tsrsSetg65ML',_Z&(DH`^"X@SU(>A`,rrN-@`W$\P
qh#i'584kO'c@`#',_H#0QaqmqpterrtYM*ii\)^H$jsaH[0p_H?t"%@NF)!`r?)>,/sQsrqh9oLOj\r
I!L'bH$Oa^H[M:+mebT8e,KgSpZ]`&WMur!WiN,tWWfK3E$3g3`r?)>+iXHrrqh=!SZJciXK&A%WMutu
X/W_do)%#<ec-Kcqr=#6)A<bq&ebri&/5]h'GLui4LjhXa8Z2?*le3srqOrk-PR7+&JGfl%2'6d&JYfe
*-&^hrn.8$rs/Q#kI$.mG^9:5"F538H$K=6"a4m(aRK/KrrN-D`r?8Bpt;HWH$TC6%XE>CG^+LZH?OLX
T?[63f`0J$#5ml3ZDsn(rM^4'W2ceqWiDqfNnEq$a8Z2?+iaNdrqPHaNN&rVW=>l)WMleqWi)eo^YSbc
f`0P&)ZKNN?mlX!'G:lg%MTB\%h]Qj%h/jT22C2haSu;@*prt0mXp)ihu=Vmo".s?&eYli%1s3d$OdR[
'bUua$PPRdnG_,@f)HZfps,1RG^+LZGBnCXGBJ.TH$OXXFa&D;k5<=#!WOA2rr_Y@JH"I+)Z9-IOa;7s
H$FOXG^4IUG^+O[GBA"QKs:1Jg&KY')ZKNe\uVd.WMuhqW2Z_mW2ZesW2?DiXiB`*aSu;@+mo:3m=^#h
hu=#\o%1=LW2Q\oW;`b*Vl-MnWi;nmVPpcCp&<YEf)H`c]/LE;'Ftfi',D/l(_dAf&K1rb&e,Tl@d*ah
b5VMB*prt0k"J>Fi;XeqnYRlP'GD#j',2/k)ANhn$l'B_%MKBe'700HgAfb(*;RU,G^+LXG^+L\G^4X^
FEMhUFa&+TH?k_=r;Ok=!WOA2rr_@V8,hHH(&d[2I<^$_GBeCYH?Xa_GBA%TH$4E2Glr;bnbq2Af)GgI
e?8eM!2ogq'!%t1X/_tmWN;tpWMlks\*X(mb5VMB+mo:3k"J;Ei;WoXn\qO-W>2>1WN)tsXK&4pVlH_o
VQ-VpW5A3*gAfe)*W!H2%MTQh&Io9]&eGrt'b;3"'GV/n',)/r?g.F1rrN-@nc'!mc?)K0&eR#kH,odC
ruV.0V^;rg'+kcc%hB6f)ANi#(`!hu&ekun)Bt%)rnIJ)rr`,AK6R<?!-nKe&pSYJH?sg`H[0p^H$FU]
H'%@ib5VMB,4Y[@q9<nG1_g]a6[$KGjo5Sao"'-lH$OZ5G7o.HH[9saI!^0bG^4O[I!`$crnIJ)rr`/Q
Y,M?!(9"+/Vl6PqX/`,"XK&;"Wi;tuWOD9nb5VMB+n>R?q9<nG1_g]b7!?THjo5Vbo?4)2WN)qrrhgC-
WiW5"X/rA%WMunsWiW5Co`!VFg&DN\qpA1P&.]3Z%hTKg(&emX()7Z%'GqW"(DRMl'QN43bPqVC*qB7=
N]hfpk"J>F[!O`jpuhZ"rq<TO'+YQ]%M0<d',;2q'c%T&'G_N#',D2m%k*M7rnRP,rseu)fo:6$GB\4S
G^4O[rco$$H@'s`H[9p_H?aX[TB?'prrN-Dnc'#W4FF<n9Lo)fHT$iWkPk\aotl6(rc\TjG^4OZH?jf8
H4>7IH@'p^H?j^ZIBWJGh#H%,$iJtjWMlbnVl6PoWVrh-X/`5$WN3)!X/`+rWkRcrbPqVC+n>R@NBM]m
k"J;EZ?eEfpZMP[rq=^?WMofo(T=@4WN)ttWiN/$WiE,"WN3"sW2n):rnRP,ruq@.?PO4a&J#Ea'GM&j
()%8q'b_;q)&3_p'GM>q+HuKsbl7_D*qK=?P9ZLis5m!Grr;Yc%$KfR+o9Sd(D75j$ka-d'Fbck'G)&o
'GV>u'Ftfi(D[T6ZMjdYs4RDqrU,hpG^"CVGBeCYGBeI[G^Fa]H?ad_G^+LZH['qEp&3,7!WOA7rsb)9
R.pXB9Lo*^oq2hXkPl"ffT(9&GBe=VG^4UYHN&0kH[0o9H4"qAH$O^_G^mO-rn[V-rs&Gl[]6=)WW&h4
WN)nrX/W)!Wi<"tX/`+tWi<%tWlt,8bl7_D+nGXBOX-=gs5m!Frr;Ya&!?&T"8^u_Wr&_2WiDtsWi;tu
WMuntX/`(sWN)ttXk!CLh>c4/,6%>('c@f('b_,l)A3Vp$kF'e'c@`"%1Ege)AsA&'LU(@bl7_D*qK=@
*)?J4s5m!Grr<#s:GC>`s!%C,KGk[D()%Dl(`!Vq&.B3f'H%Z$&.T!^)AjA,&JI(hrS@M-rsSi"YBYGA
H[9s^H$oU9'6e\IH$Od`G^"=UI!g9fGBnnnqoo'@s!%%6%NS=Cs8V1S8,iPgrCo&rl2Lh_l_j].)gQaR
H[9m]GB\=ZH$jpaGB\1UI!^6dG^+f-rS@M-ru(h0aJl8AX/`.uWiW.tWMlbrWiE,"WMcVmri?:(Vl?lY
r650Arupt5%NS=Cs8V4T8,iPgrCeuql2Lh`m(rY$&uhn0X/`(sW2Q\rWN3&!W2HJmri?:'W2Zoirn[V.
s!.Hg3YrJ@'GV>m'bV#l'GM;t%h]Nk%h]0T&0;Jl%1<i'metE1!WO54rrT8-O8f.]k"J>Frr3%X*Ob54
,PT#8()%,m()%,l%h]Wl'c.Mp&eu)l%gEI\)[Zo\&JL,trnd\/rrr>PL3n2ird#K,H['d]H$O^^G^+L[
G^4=OGCOmYGB8#.mJY<0!WOA8rrT/.N;ihZj\/2Drr3%T+11;4,PT6.H?aX[H?aX\G^+R\H@'p^G^=[\
G&MSPI<9OQGBp:`rnd\/rs\h^YcFe&WiN.uX/W&sWY;G5W2ZbsW2ZPgW3<1rW2-E1n,:N2!WO>7rrT2/
N;ihZk"J;Err3%T+11;4&GOJNX/W%uX/W%uW2QbsWiQ,u&#uY/VkBuiXehkkW2[l4rnd\/rt"^\*u5\)
&e>`i&J,Zk(E*2h&.]?c'+bii%1a-a'+PX7bkfTa!WO54rrSGjS,WEik"J>Frr3&.'rL9r%fGI;&f;An
&ekuj&JGimr>6+\&/,Zg&ekid',(lf&JII^rSIS.rrM_ord+`lH$=T6GSb[OH[C-fHZs^ZH$=OYGB\=V
G]n=_dJ;&e!WOA8rrSAlR/[*fj\/2Drr3&*(T$Es#5mSMH$aj]rd"Ngrcn]qH[L3dGBs14$[Hu@H$FOW
G^,,$rSIS.rseS=WN3)!Wi2qsWMlhrri6[5X/MtrWMlhrVl6SnWMc_sf(mSj!WO>7rrSAlR/[*fk"J;E
rr3&*(Sp?r*W>*(WN3%tWN)qrW2ZbrXK/J)Wi2nqWMunrVl?ZpVus$)jSds8g]%NWhd6j&'bh,V'G)&o
(D[i)'b_2g',D>u()Rec&I&p^'c<&'rm(NEruUe3!ga.Xrr3)_9M#0^rrTVDVX+6hrV=u*$ka<g%i#`V
'c.`%(`3eu%hKEk'c%N$&ebZf'+u07Vu,?Ng]%NWig"b4H?sf7Gm\kCH[:$dH?jdZGlE!jH[C)<GQrG<
H@)IYrm(NEs!%(7!gO.Wrr3)^9Lo*]rrTJBV<e-grV=omGBeFZG^=W6H3ntEI!^-bGB\=Zrd"ouH$ORY
H$F[c^&-[dg]&5kkdRLgWiE"tWi<%uX/`8&WiE"pWN*#!X/i9"W!99#WiN]$rm(NEruq"6!gO.Wrr3)_
9Lo*]rrTJBV!J$frqY$CVl?_rW2cirWY_b:XK/>#Vl6SqWiN/#WMueqWMur"d/2]"g]&St`Bb7P%MBKh
(`*Vq$kaHo'+krl',2/l&/,ut'GD)q)&HT@rQbEDruUe3!kntcrr3)_9M#0^rrR]n]'KABrUZa%'Fk`h
'GMDu&.]0d)&E_s'G;)o&ePNh)&3hu'Gh]'GOs\kg]&Std"QdjGBeFYH[Bs_GBnU_H?jg]G^4UZGC"^a
H?a[]I!UP/rQbEDs!%(7!k\tdrr3)^9Lo*]rrRQk\Ej/0rUR(<H$=LXH$Og`G^+FZI!^'`H$K=6%!ZuD
I<p0`H$asbV=`XEg]%BRg97RVW#ht<XK/;"W2cr"Wi<"sWMunqW2d&$Wi;qtXK&>`rQbEDruq"6!k\tc
rr3)_9Lo*]rrRTl\Ej/%rURV&Wi2kqWiE6$W;rmrWtVG3WMlerWMlbsXfAA!WiN5$_Y2jdg]%?NW?D0S
+:o4t'bqT(&JZ&t(E"##&eYik&etun',(id%MKQ*qYnh@!WO53rsh4Zm/R+J9M#0_s61b"mHjiTrqbo/
r=g:_'+u)r)AWf#()Ic)'+tli',(un&etul%Lj!a=lnN?g]%?N^jH'+$$^`>H?spdG^=]7HO=tAG^4RZ
H?X[\H2`!jH$Rm8rm1TFs!%%6%R!2Gs8V1S8,iPgkp&gem/I1eqWXCGGmAP=H$Xa`H?]@8!d]3=rcelt
G^+OZH?XXYGBeColJDQqrr`)CX/c/u#HF]%WiN8#Wr/n!W2Z`pW=5f)Wi;trVl6Sof)#BlrrN-Co)B1_
6gXjQk"J;Es8V=.9'kpE&H;OjZ)Xh'Wi2nrX/`8$Vl]lu!j&E#rM^1'Wi2qrWi2hoWjM9Ps4dQ#onsV'
(DR\u&eG`k)@[8p'+GHd%Ls!X%1Esc(_I;m&J5Zj[J9aIrrN-@o)B09132a]k"J>Fs5[i8^[(nHrqGAV
(`4#'((h&j'c.Jk()@Jg'G1cb%LiaV(Ddeq&J>Ze'LUX3s4dPpoW!4aH[:!`G^"IZI!0d^H$4CWG'A.R
FEMkUI!9f6GQ`;<]D)<NrrN-Do)B0713)[\j\/2Ds5[f8^?be&rqG?.H[Ga<%!ZuAH?sg[H?sgXH$K=4
#'G$3H[L-^rHJBhKB1nhg]%<I_#CARWiE%sW2cl!Vl?_rVl6SmVl6JiV5gStW2HVnri#t=p\rM=!WO>6
rscb!EU<_f9Lo*^jC]ULli..fpY`0SX8]+7WMlhsX/W"tX/MkoW2HSmVPU2kXK&,rVus#uXmFpEg]&Vh
H5IG5'G_/n',2/q%h]Hb%1ip[$P3j]%Mfls'+bWc&/>eKo`!2:!WO52rsQG$:l+7-8H+K<6dFus-N<Vh
3uShK'G_2n',;5p%MTH_&.T3Z$kX'\&K)B!'FkWa',3LZhZ)@1!UlQXH4"qDGC"O[H?j^[GlDmgG'A*.
G7A_AH[9s^GBe@YGcUK9ci4%G,4Y[@\iW`Bj\/2DLe0qXlMhLro@JYCH?sj_G^=X]H$FOZG]s(1&9`5A
GBS1WH[0p]GBe@YIcB5ag]%BF[]?J.WWB'!ri-("W2Z`pVZN`oVZ*LsVQ-\tWW&h"WN)o1o`!2:!WO>5
rsQD":kn++8,e<96I"fq$3'PJXK8G%WN)rrWWfB"Wi)bnrML.)W2?MoX/W+sW2Q\qWpJUBg]&Ve@1!AY
(DRZ$&eGro',VGp&df$Z%Ls-_&J,Wa',D5p$kX,7o)6o7(&o=`j8U##D?'Xa"LA(-N<BCas-O#f"9cUA
s*b+MrsUpk5O/:>"9d0Qs)%u=s!K9!=O\o/&/Q,s()7>o(_[N#&JGT[%h93]&J>Kc%hKEj'+YBa44i?h
g]&VeNcoSmH[:!bG^"O[H$Xa[H$+:TGB\=VG^"FRG^=U[G'J8-nbpf6(&oIaiVsr(Du]jc#IFI1Ns>pi
s-3of#6_sEs*t@RrsV$q60\F?#7&]Ws)85Bs!KB'>1.tEG^Fd_H?sd\H[0j`G^4LUGB\:UG^+FWF`r%V
G^":UJ)]>bg]%rSYGS4uX/`2#W2QesWN3%sWMZTmW"5l*WMlelWN3"tVQ$Q+nc$l7(&oFair:#(Du]jc
#IFI1Ns>pis-3of#6_sEs*t@RrsV$q60\F?#7&]Ws)85BrtR*j>10FIWN3)"X/`(sX/W)"W2Z_mr2:%'
W2Z\mWN3"rV5gQ^hZ)@1-L54Y'bh>p%M'9h'G_;p(_.)a%2'-\%1*RX&/,Qa',29#&s)S]ci5^!*\o$f
&It$)s#:.es8T)763$t0"Ul/;r\PkJs8RNN8H8^+":pUjncU>rs2,l\rr3?U$%C5W(DIPu%h99P'c7St
'GM)f$4m[[$k!OT&eP]c&/5rr(cg4)s4dPTm#ZPlGn"tBH?jd^G^4X[GBJ+Src\inGBe:VGBeCYH[L(5
nbpf60`N=S-@$==PlLbF#IFI1X;XM,s*=t^)+XZb-dr%pJ-SaIs)&&RO8ADP/)L<E+p\,I-S5dWc@^Ih
H$X[YH$Xa^H$FU[G]n4SGBn@SG'A1TG^"CXH[:'ginj^irrVPkX8]+#WMc`pWZ%q;WN2trVP^>kW2HGi
W2?PmW2ZetXJr`"rQkKtruj6HH5.'Ws8P.cZiC',)FXW*H3k*"8,bFpdf9>t#>>*sD?gc7qXOkAhZ(M<
#QF`,/Id3UXK2?#!N2mpWXc#-WiE%rV5U>mVkp;hWW&h#WMuquXK(UCs4dPSm!&FH+W)(6((h8q'+trm
&e5H^%h/sV$OmUX'G;)n'GVAoS+6I'rs\oKhhs;q--lDfl%IdirrK(prr31WPc(DXiPPTo!PjBerrtgn
0%9WLb5VDA\:jk]-^Tn`dR=ri)&O2,&eYuo'+krm%hK6]%L`dT$P3g\'+krn',_HCfA?P^rr_VVI!bj?
%"!;GH?ja[H$OXYG^'.1#'G!2GBeCXrcnZnH?Z=WrQkKPs!$9V2$kYSqu>r8gA_*QWVZVo#)JPBV>fJl
rr3#8L&M#U6O,9nq1ZujrrKZarr4@5ORLPOH[L0fH[C$`H?jaZH?j^ZGBS.RG'%kOGBeCXH?jd_H%+c0
s4dPSmBuqp)QTs?X/W,!WMlerWMlbnVPg>hUo1/iWMunsri-(!\FBICrs\oNhMO/s-HuAel%RjjrrK+r
rr31YQ)LPYiktcq!PsKgrrtgq0@T`Nb5VDA\V:%_'pt*Od&sFNX/rA&Wi<"tWMlhrW2Z`oV[]K"W2Q\p
W2chrX/W)ahZ)@1-LZa*)&Nu&'b:]g(E"#'((_,i#mgtL$4.4T(DIAo().Jt'X73-ci4=O*rl&jLajrt
k2u[G4p2$pp&?-4n^h(^)&!f$'+>Hj(`<u%'+kod#mq(N#n@FZ(D%2X'a#-a8)2u$g]&VhV0[K8H$aj]
G'\L_H?jj]H$=@NG'A(KGBnO]GBnL[H?jeDoDR#8$3)4Lq:^QP/T^%9rrY@g#[I'&-N3JbLjFGoH[9s\
G^FdbH$Xa\H?F:NGB\(MGC"U\G^=X]H$P)(hZ)@1$LbO*XK/A%Wi)bpri6m9X/DqqV51#eV5'ugX/`+t
X/W+uWP7s&ci4=O+ohAlL+"WojlZRF49l-sp&?-5n^a\>XK&A%WMZVpX/r;#WMlhoUnsudUSauiX/W&s
WWT6"XR+gDg]&VkTI(Bg%M9*V$P*[V%MK9c%1Nd[&ebT]',)&i(_[Sm',),&pAWD<!WO5>rs&%@(E8e>
rp'L`f_kpQWqQH>rq+uo)AE\q%LWXO&If0^&eGQ`%1j-b&IT0`'G)&o'G(fi&m=>Qs4dPeo!EgkH?XUX
F`qtNGB\:UH?XLTrcerrGBeCYG^=X\GBe@X`qKDXrrN-DrVm)lGSqKequ5m\!7q)R!2oPj(&mjZOF2=u
H$=FTFa%tPG^4OYGBA'.GR\h@G^4O\G^4OYH$G>5hZ)@1)"PMDWiE"rVl$AiV5L8kW2cblVPpGmVPsKn
"K8B#WMofq!lt$6ci4%G+oVEFnTYojQMgaIrrC[L#6:[qrs/Pqg81mNWN#lp)lBR1Vl6SoW2?DhW2Q\m
WMleqX/W+tW2Zc"mb[uus!@HP65gUP)&F/+()%K#'+YWf'+kie%MB6[&/6$")AEbp%9D$UcMmqF*rGs@
`*jrRUuq"C#&k%Z%inCAp\tKtq<+4i)%dbc(`O5*'GqMs%hTHg&J#B^&.T$](`+,.'+Y`dF7A&dg]&Sp
_Ld/^H$jsdH[9p`H[0gZG^4OYGB\=VG'J=\H[U0aG]nVdq9K!@s!%@?"i=[p4/D!(rs!BR%2'aVqY1!o
rqY]MI!^/:HO5"DH[0j[G^4RZrc\frGBJ4YH@:0dG^+D'nD=3"rs&8AWiW8#XSo1<WN3)!W2HVoW2QVl
WMl_oWiW8'Wi2koUX]+brrN-Cqu6i:?m[q0jm2pND@m<j+%uM*rs8W"k,bVbWN<3#WuA"<XK&7uW2Zbp
W2HPmW2?SqX0&J&W2ZZ(o%sE$s!@Nh>8\7k(E"&('bM/s'bM5s()@Al&.B*_&IfNo(_@Jr&;B*@cMmqF
*r5g>]l52kU?CqD#-=.:>I2uWpAZH9n$th('bM?%'bh>p(D[\u'c.St&J#B^&eGTe()do$'bDjcpYPr)
rt"tTO*l;"H@(!aH?aa_H?fC7"*Sp6GQ)goGC"XaG^F[[QJh\drrN-Dq>UW1E$J,NjmE'PXHk)9Z.JdE
rttY$[XELKG^OjaH$OX\H?jd^H[9s^GBe?1GR/YEH?jdZI'NG&s4dPgqpqmNX/W/$X/`1uWiN.uX/`2#
VlBZo%&p2'X/rD%X/Mtpi;Cn#!WO>=rrp#R,>OoomJdBkQ6TV=fD,(>#lF%uUTCJpXK2?#"KAH%Wi>ut
!3,pq"f\K"WN33$WWT/t_Y;peg]&StjbG-!%M9He'G_;q',:uq)&O"q%hf<Z&/,Na%hf<^'LAtjrQbED
ruUt8#4of9)a^7rmf*BM,Hq+=s!@X=bAn=1%2KWj'c%Gr'GM/s)ANbl&J>H\&ePTa%hf?c&O=M8hZ)@1
-2chrH@'j\H?a^^G^4R\GC4aaH$4CVF`_eOGB\:WFa/1\ZL%P8rrN-Dq#:Qh`DmmFTD\-W",nM.rq-4!
rV+HjH?j[[H?jg`Gl;n%H[L-`GBe@TFEi%SGBeCVH?Y+eqVM8,s!@X*ZDah%W2lntX/W+uWi3##X/W"q
WMZMiWMcYmWhu_pV7,aicMmqF+o)'Ao#+QJ6D+2Drr\6+Y5\(n'E.[JS>rQcWiE%uX/W(uWi<)$WrAq,
WMQGjW2HPmWhuepXO$b"s4[Jgo=R$r$kX6i'+P]h&.9'`',:rk&.]-I&d\mO'GVDr$[L1rc2RhE*qfO;
cpe@*e,0.:rri>uNsBjus!7O&Tg'%r()@Pt$Pa9`$PO0g'+b]f$k<m_&IAsa'GUraL?JNls4[Jgo"K[#
GBnO]G^"IYG]n:VH$X[\GB\3/GR8M6H$Xg^FICPPc2RhE,5(s?c9r+'dJNq8rri>uN!a^trt>7gUjI?1
H?sj^G'\CWFa/.WH2`$uG'8+TGBA"TH$XRVS`]n-s4[Jto"h9(Vl?_sWMcbpW2?MmWN)nsVl6JkWMubk
WiE,!V6&)?c2RhE+nbj=c9r+'deiV8"8e&bFRfAVr8FTLW2H\sWMubpW2QSmWN)ttW2QVlWMlblVlQht
VPgiarSIS.s!.BmN#`KD&.B?i'+brn'Ftig&fDH$(DIJr&e>Qc'bN^5kPWU)!WO55rs%t_5p0[Nq"F^k
n\\`XD=mAu,l[>LFWV81%2'Ej&JYrm&J>`f()@c&().8p&.oBb'+@1Oo)@MGgA`Dnesgu1H$FIXH?j[\
H$OUYGBeL]H@'p^H$FOXGC"I^Zf_21rrN-Do`#-aRR86.]_M4#"n9B9,&Hl@rsets]o[PbH?XU[H$=OZ
rHJEgH@(#<H4+nBGBe=VH$4V[o)@MGgA`DneuYmMWi;krWi;nsWMuhqW2QhuX/i8"WMl_nVlHYi]B9%9
rrN-Co`#-aRmS?/]_M4#"n9B:,&Hl@rsets^8.[+Wi2nsWi2qtrM]dqri?$u$`C#&W2?MmVPVW0rnd\/
s!.L0a^#Yo'c%W%'GV5q'b:ca%1a!]%h]<\&J,Kc$QXfNp\rG;!WO53rs%b^9-eJjq>:0rr7I]M/jc9"
rs8M[X\p#J()Ikf'FGEg&e>H]%M'']&cN7?&cN=E$SnRFqq_;+rt>:taG5(dH?spaH$X^]H?aXWG5ZUn
G]n7TGBe@UGa[1XrltHDs!%%6#3hgS,]UKmqu6ltet6>&6D3cH#l<G_K6_]fH[G^:'mk4MGBS.RG]n=U
G'A1UGBe:WXR#c>s4[JjrU%_'X/W,!X/`/!WN)tsW2HPlW2HSnVl0Kl"fJ2tf_>BirrN-Co)ApZTh?YM
]_VI)#5m&F@4jj=mf*IfhmK5YW;`h%WN)qsX/W&rVZj#sW2QVlrMTjrV75dfh>c1.+o:N4:DFBM%hffp
&J#K_&eYTc&J#Ke%M96_((^sl_smTJrrN-@nc'7#kajLN?deuSpUc/Y-5o1KjSSBF%K?%QQST?d%M0?k
'+PWR&.oNb'+>Hc%hB9_'b_')LYqt-h>c1.$Ms(sJpMZcG^4X]rce`nG^4LXG^"CWGQ)gkH?aXk_XRKI
rrN-Dnc'7#kF=1K?I8`Pp:5fR.2tOLj889E%0#qOSpYj.GBeF[G^'.3&pJVFH$=IWGB\:UH?j^ZS_a,@
h>c1.'Dh"*UT1;lW2ZhtW2Q\oWMuepWW&h'Vl6MlX/Mqk`:3]KrrN-Cnc'7#kF=.J?I8`Pp:5fR.2kFJ
j886D"SLBEV5jNn!ii<#rhot!W2ceqrhp4&Vl?SoWMlYrh>7-,s4RDprqkcO58OV;)&O,+(_d`&(_[>g
%iQ,q%hTNg(15,Iqof!?ruUS-$BcG80e3\@&41p3l2Mn)o?E=I&I]?l()@c''bqW$&.f-_(_[Sm',1j&
K@]hsh#H(-+TD8tWIB28G^Fd`I!g3cI!g0_G'87YG^"@XG^+kYkkiR'!WOA2rsFf/#VRY<%hq9Wkir*i
rU\0pH$FIWI!^3gH[:!eH$=IRH$ad]GBnIXHCWLZrnRP,rs/Q#ij,D]V5XBo's+L:X/rD%W2HSqWMuhp
Wi;qj`9@*ArrN-CmJdNR*XFDJ%hB@>IH]qq+T:oRR\d!\WiW8%Y,eS&YH"P"V5gSqWMlerW2HoNp\rtJ
f`*&mp!T*n)\Ef#(DIPs)&<hq&.K*`'b_&`'.@G$jS8_trrN-@mJdF\HV,h'4-&dkruV(#]7W3a&/c5t
'b_?!((Urd%M'9h&.B!\/9f;*rS.A)rso&$d%,]4GBnL]H$O^`HMhspH$Xa[FEi(d[H%&]bPqVC,45C8
ms7\['KM*>jo5_ckIHM!G]nF[H$Xc8HN86gG7/YAH?aUVG^5Osmeto?f`)9Wp!BS2W2Q_sX8]+3XfJCu
W2HSoWi;qnW262sjS8_trrN-CmJdF[H;#n)3K*=ersS_e\WrnfVlZr!Wi>uu&#Q;'W2Q_rW2HPlV5hc-
rS.A(ruM(/e#6h1&/,fo&e#Kh'G1lh(D.&b%1>1B]&iefb5VMB*prt5rTNsuM(puNgueVWrqbcoQ<>(:
'G_An%i,`l&.oTl%LrgT(.4),nGM#?fDclio$OOqH$FU\H?j^[H$Xa[H$X^XGBS.VOLjNLrlY6As!$k1
#lNlYab_`4NnWXq*WGot^R]q$G^4U\G^+O[H?a[[H?OLUGB\M,c0tSas4@8YrUJ:ATr"`fX/`.tri-I-
W2ZhrVPpAhUnYQ`qYnY;!WO>1rs8Sdp;r+F3K;bSruCmt^o!^%WN*#!WMlhrX/MtsWi)emVPg5kcL:\b
s472gqsiLKJk-dj%h/sX%1X*f%MTN_%jkPG]]Aq1rrN-@l2LtaeSl9YMsoj/)ufZsbb0)B&e5N]%LigY
((^uk%1`jlBV3Z@r7V,$ru1e)g9HZcH$=LVGB@tOH?sa[G]e4TI@@b,q8iR:s!$_-#5Zhe(G^j8kPlM#
q<5qnL3RreG]e1OG'J=VGC"FVG'Sh<cgUebs472gr:/OJR\6XXW2HMhVPgGoVQ$MjW2,cQ]Arb/rrN-C
l2Ltae8?$WM!jI+')qakaeFrlW2Q\mVPU2hX/DkqrhfpsSu^3+rRq5$rtt_1kK0iV:E(;n%M]`h',_Gs
-s_tBea*(PrrN-@k5PYM>n\[(pAO4T)#WsX^Ro^7*uu+.)A*Js'G)-:B:[!!o_mGBec-Kbq<#\sMgTer
HZsa]GBnRZFaAS%YgVh5a8Z2?,3Jn0kZS]L_"R`jrtt\)f=RQ+H[:!`GC4XZI!BdYI"Im(hXpd!s4.,d
rV>TqWgTKWWN)hqWi2nuVPL)[RBb6+qT&U:rupP)#3]5*.)GWUkl2Lto%1LEP+SYOWMlnsW3*%pVPfoW
_;=h_f`0J$(B44'j2nHeH=/s#4?l,(AUU/]dHUK)`r?)>*p*D+qn#iJ9rmI@rtbS/n(>=KMK)T[5!;+p
9PT<]a4p.\rn%2"rsSi'o]!lkQ&1$>I!u!C#D%c'\Ba=5r5Sa;s!$S)#5br3*_iZskl2Fsq<lkFTTFkV
I=-HlI=Qs4W5RBYqYo+HeGg<`r:K!gX.5WHSXuLKT:D=;TXW51q#&/3!WO>)rs&A2<ut)9k32g\rV>m5
\tGLYR[p(EU7S!GSZBZ]nG<.9s3go]rV>m=cG?igUn43UY.2F#k4AHKrl4s=ruU5##4T!2-r[/>l2MIs
r:T7(b.=dUTq7pVZFnB:mJ$PXf)O1u'`Ijpgs!O<W1ooWUT:f>e)g/srr0q;!WOA(rs%quALUQVp?DSk
rquHOeAo)#VP'QTVm*bTh!Oh5rmq+trtGA,mbH%$Z)ORqV510"_UIW;qYnJ6!WO>'rs%quAgpWVp?DSk
rquHOeAo)$VPBr`W3EhTh!Fb4rmq+rrt#,,q"4%?k2bUbm-s]ErVj_7!WO5"rs&&%6kr;+qs"+krr)]f
na5Q%jQ5Uno(`.^e,Rep&,uM%oBkf(j5f=fn+HMTrkna:s!$G%#4]&e(eM:8l2M:nrVH6Xm-!HhjQQ"%
p\Xs=s3UcVrquQ_mHN`mjQ5^rp%nXd_uBc;+lWG*o!C\"8@eW^rt#,-qY'FFkN(X`kj@s9r;P1Fbl7bC
r;?Qks8B_4!WO4trroJa&R"JqkPkVV[,V)^!rW#qd/V>i!r`&prql`o^]+?7,2W>'W&PGlm.fcD!q`eW
rqccprVb+Cbl7bDr;?Qks8B_4!WO>"rroA\'3OVrkPkVUZJkf[!rW#rd/S^t!WO4srs%qW4<Sacq!%e[
gaKhXs+:7Os!$;!#4@^=+EYTtl2Lh?.D3h'K)YlO+l3/&mZTaTFN+%>rrUt(]ZU8+rrN-@g]%H1TKt,M
cg(N3otBY5s+:7Os!$4t"kTD4/T]2%rrVl+lH9-YrrN-Cg]%H/TKk&Lc0G<1ot9P3s+:7OruTno#6*Y@
+<P[_ZN#OV!WO@trs&J_M'+!^hm396rrN-CgA_BVj,"j$E8Ru$K)YlO*nUDrmW0EnPO8;>rr`%qWVX[8
K)YlO,1li!m;O0lOR;r:rr`%nVY\@5K)YlO+kQ_um;O-jOR;u;rr`%oVu"I6K)YlO*nL>rrmP[13gnb#
p&>-eI:;cgs+:7Os!$%o#QE.f-p!aLr:U'lomC-=a8^bk!WO=ors/POCa_?4gALXD"8.%KoZ-u`rrN-@
eGfaG`-NpsQLjtQ#Q=Dss8:a)r5\hhrrN-DeGfaG_g3juPk+\N#Q=Dss8:[&r5\hhrrN-CeGfaG_g<q!
Pk+\N#Q=Dss8:[&r5\hhrrN-@df0OHd9dVEU\Oce"6VqMrPSYerrN-Ddf0OHcs.ADU%nQc"6VnLrPSYe
rrN-Cdf0OHcs.ACU%nQc"6VkJrPSYerrN-@ci4-_8esYGrVlr^6+Ol4K)YlO,1$8l]LWl&gAV$Qk<QSp
s+:7Oruo_g"M@8B4kfl7!p;eX_Z,5f!WO4drr`,":m/HjK)YlO,0p2jqQ*PU]DmK_!WO=grr`,!;3AKj
K)YlO*mFWbjmp%`K)YlO,0^&fjRTq_K)YlO+jBrejRTq_K)YlO*eaQFrrN-DK`?Z(!WO<rs+:7OruQjn
K)YlO,)#uJrrN-CK`?Z(!WO3os+:7Os!!-rK)YlO+b]lIrrN-@K`?Z(!WO?ss+:7Orum'qK)YlO*eaQF
rrN-DK`?Z(!WO<rs+:7OruQjnK)YlO,)#uJrrN-CK`?Z(!WO3os+:7Os!!-rK)YlO+b]lIrrN-@K`?Z(
!WO?ss+:7Orum'qK)YlO*eaQFrrN-DK`?Z(!WO<rs+:7OruQjnK)YlO,)#uJrrN-CK`?Z(!WO3os+:7O
s!!-rK)YlO+b]lIrrN-@K`?Z(!WO?ss+:7Orum'qK)YlO*eaQFrrN-DK`?Z(!WO<rs+:7OruQjnK)YlO
,)#uJrrN-CK`?Z(!WO3os+:7Os!!-rK)YlO+b]lIrrN-@K`?Z(!WO?ss+:7Orum'qK)YlO*eaQFrrN-D
K`?Z(!WO<rs+:7OruQjnK)YlO,)#uJrrN-CK`?Z(!WO3os+:7Os!!-rK)YlO+b]lIrrN-@K`?Z(!WO?s
s+:7Orum'qK)YlO*eaQFrrN-DK`?Z(!WO<rs+:7OruQjnK)YlO,)#uJrrN-CK`?Z(!WO3os+:7Os!!-r
K)YlO+b]lIrrN-@K`?Z(!WO?ss+:7Orum'qK)YlO*eaQFrrN-DK`?Z(!WO<rs+:7OruQjnK)YlO,)#uJ
rrN-CK`?Z(!WO3os+:7Os!!-rK)YlO+b]lIrrN-@K`?Z(!WO?ss+:7Orum'qK)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&
K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&K)^H&J,~>

%%EndBinary
grestore
np
0 gry
LLSDUB+CMR10*1 [10.9091 0 0 -10.9091 0 0 ]msf62.8372 394.252 mo(1)shgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
/LLSDUH+CMEX10*1 uf/LLSDUH+CMEX10 uf/JQBAAA+CMEX10 uf/LLSDUG+CMSY10*1 uf/LLSDUG+CMSY10 uf/JXRAAA+CMSY10 uf/LLSDUF+CMR6*1 uf/LLSDUF+CMR6 uf/KUDAAA+CMR6 uf/LLSDUE+CMMI8*1 uf/LLSDUE+CMMI8 uf/SBVPMX+CMMI8 uf/LLSDUD+CMR8*1 uf/LLSDUD+CMR8 uf/KVXQMX+CMR8 uf/LLSDUC+CMMI10*1 uf/LLSDUC+CMMI10 uf/CMKQMX+CMMI10 uf/LLSDUB+CMR10*1 uf/LLSDUB+CMR10 uf/UPEAAA+CMR10 uf/LLSDUA+CMBX12*1 uf/LLSDUA+CMBX12 uf/DLGQMX+CMBX12 uf/LLSDTZ+CMR12*1 uf/LLSDTZ+CMR12 uf/JIWAAA+CMR12 uf/LLSDTY+CMR17*1 uf/LLSDTY+CMR17 uf/LWYAAA+CMR17 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
